<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Lilatomic</title>
	<subtitle>My things</subtitle>
	
	<link href="https://lilatomic.ca/feed/feed.xml" rel="self"/>
	<link href="https://lilatomic.ca/"/>
	<updated>2020-12-09T00:00:00+00:00</updated>
	<id>https://lilatomic.ca/</id>
	<author>
		<name>Lilatomic</name>
		<email></email>
	</author>
	
	<entry>
		<title>Fun with ADO.NET</title>
		<link href="https://lilatomic.ca/posts/fun_with_adodotnet/"/>
		<updated>2020-12-09T00:00:00+00:00</updated>
		<id>https://lilatomic.ca/posts/fun_with_adodotnet/</id>
		<content type="html">&lt;h1 id=&quot;fun-with-ado.net&quot;&gt;Fun with &lt;a href=&quot;http://ado.net/&quot;&gt;ADO.NET&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;#fun-with-ado.net&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;column-is-not-in-table%2C-but-it-definitely-is&quot;&gt;Column is not in Table, but it definitely is &lt;a class=&quot;direct-link&quot; href=&quot;#column-is-not-in-table%2C-but-it-definitely-is&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem &lt;a class=&quot;direct-link&quot; href=&quot;#problem&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Maybe you&#39;ve got some code which is like the following, which accesses a field by a column reference. This particular snippet converts DBNull to Nothing (null), which is kinda useful I guess.&lt;/p&gt;
&lt;pre class=&quot;language-vb&quot;&gt;&lt;code class=&quot;language-vb&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Shared&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Function&lt;/span&gt; GetField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ByVal&lt;/span&gt; row &lt;span class=&quot;token keyword&quot;&gt;As&lt;/span&gt; EntityBase&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ByVal&lt;/span&gt; field &lt;span class=&quot;token keyword&quot;&gt;As&lt;/span&gt; DataColumn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Object&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;Dim&lt;/span&gt; obj &lt;span class=&quot;token keyword&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; row&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DataRow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Item&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;field&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TypeOf&lt;/span&gt; obj &lt;span class=&quot;token keyword&quot;&gt;Is&lt;/span&gt; DBNull &lt;span class=&quot;token keyword&quot;&gt;Then&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;Return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;Nothing&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;If&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;Return&lt;/span&gt; obj&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Function&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might find that you&#39;re getting some error about &lt;code&gt;&amp;quot;Column &#39;&#39; does not belong to table .&amp;quot;&lt;/code&gt;, but you are 100% sure that the column actually is there. Maybe you&#39;ve even cracked it open in the debugger and checked that the Table definitely has that column.&lt;/p&gt;
&lt;h3 id=&quot;possible-cause&quot;&gt;Possible Cause &lt;a class=&quot;direct-link&quot; href=&quot;#possible-cause&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One possibility is that the Columns are actually checked by reference equality, not value equality. So if you somehow have a new or different instance of the Table, the Column from one will not be found in the other. This could happen if you&#39;ve recreated the DB but haven&#39;t updated things which reference columns. For example, maybe the application has a handy &amp;quot;reload data&amp;quot; button which recreates the tables and reloads from the DB, but doesn&#39;t purge an in-memory list (maybe it&#39;s even tightly bound in a UI component). Another way you could end up with different DBs is in tests. You might create and seed a Table, and separately reference columns from a Table inside your test.&lt;/p&gt;
&lt;p&gt;For extra fun, this doesn&#39;t seem to be a problem in the .Net Framework 2, but &lt;em&gt;is&lt;/em&gt; in the .Net Framework 4. So that&#39;s exciting.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Common Dhall Tasks for Config Files</title>
		<link href="https://lilatomic.ca/posts/dhall_common_tasks_for_config_files/"/>
		<updated>2020-12-09T00:00:00+00:00</updated>
		<id>https://lilatomic.ca/posts/dhall_common_tasks_for_config_files/</id>
		<content type="html">&lt;h1 id=&quot;common-dhall-tasks-for-config-files&quot;&gt;Common Dhall Tasks for Config Files &lt;a class=&quot;direct-link&quot; href=&quot;#common-dhall-tasks-for-config-files&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This page describes common tasks in using Dhall for generating config files. It provides the step-by-step for implementing these common features.&lt;/p&gt;
&lt;h2 id=&quot;enums-(sum-types)&quot;&gt;Enums (Sum Types) &lt;a class=&quot;direct-link&quot; href=&quot;#enums-(sum-types)&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Define the type. Angle brackets around all the options, pipelines between the options. These are the names which appear in code, so it&#39;s alright if they follow your code convention rather than how they appear in the config file. So if you write enums in all capital letters because they&#39;re basically constants, you do you.&lt;/p&gt;
&lt;p&gt;:/types/ServiceType.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; simple &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; forking &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; oneshot &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; notify &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; dbus &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; idle &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Register it in the types.dhall file:&lt;/p&gt;
&lt;p&gt;:/types.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ServiceType&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ServiceType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use it in an example by referencing through the type import:&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ServiceType&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ServiceType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;simple&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a renderer for the type. Start with the import of the types files. Then we make a function which merges a record with the string equivalents with the input. The only thing which falls out is the correct string equivalent. Neat!&lt;/p&gt;
&lt;p&gt;:/render/ServiceType.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; types &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ServiceType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;merge&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; simple &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;simple&quot;&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; forking &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;forking&quot;&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; oneshot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;oneshot&quot;&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; notify &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;notify&quot;&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dbus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dbus&quot;&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; idle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;idle&quot;&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		x&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Register the renderer with:&lt;/p&gt;
&lt;p&gt;:/render.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ServiceType&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;render&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ServiceType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use it in other renderers like normal. Since we&#39;re in the &#39;render&#39; folder, we can just import it with a local import, like &lt;code&gt;./ServiceType.dhall&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;:/render/Service.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; types &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;br&gt;	[Service]&lt;br&gt;	User=&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression language-dhall&quot;&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	ExecStart=&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression language-dhall&quot;&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ExecStart&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	Type=&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression language-dhall&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ServiceType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ServiceType&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	&#39;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;unions-%7C-complex-sum-types&quot;&gt;Unions | Complex Sum Types &lt;a class=&quot;direct-link&quot; href=&quot;#unions-%7C-complex-sum-types&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you&#39;ve got a field which is a value of Type a &lt;em&gt;or&lt;/em&gt; Type b. A sum type represents that. This example combines an enum and Text, but the same principle holds for any types. Here&#39;s a &lt;a href=&quot;https://hackage.haskell.org/package/dhall-1.16.1/docs/Dhall-Tutorial.html#g:12&quot;&gt;link&lt;/a&gt; for the official tutorial&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create the sum type similarly to how you&#39;d create an Enum. Note that each option has both a name and a Type. These also generate the constructors for the Union type.&lt;/p&gt;
&lt;p&gt;:/types/Dependency.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Runlevel&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RunlevelTargets&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Register it in the &#39;:/types.dhall&#39;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a renderer for the type. You can use merge to select a function and then apply it. You can compose this from other functions you have already. Note that we use &lt;code&gt;=&lt;/code&gt; here, since this isn&#39;t defining a type signature. Also note that we&#39;re using &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;Text/show&lt;/code&gt; was adding extra quotes.&lt;/p&gt;
&lt;p&gt;:/render/Dependency.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; types &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt; x&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;merge&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Runlevel&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RunlevelTargets&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; id &lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; x&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Register it in the &#39;:/render.dhall&#39;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use it by accessing the constructor you want. Note that the renderer is the same, since they&#39;re ultimatly the same type:&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Render&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;reder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;br&gt;	&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression language-dhall&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dependency&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;nfs-common.service&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression language-dhall&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dependency&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Runlevel&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Runlevel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multiuser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;	&#39;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;optional-fields-(autoexclusion)&quot;&gt;Optional fields (autoexclusion) &lt;a class=&quot;direct-link&quot; href=&quot;#optional-fields-(autoexclusion)&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you want a field to not appear if there is no value defined.&lt;/p&gt;
&lt;p&gt;We&#39;ll define a helper function to render optionals. I use it frequently so I gave it a short name. Mine adds a newline automatically, so they don&#39;t appear if the option doesn&#39;t render.&lt;/p&gt;
&lt;p&gt;:/render/ro.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;{-&lt;br&gt;	a: Type parameter&lt;br&gt;	f: Renderer&lt;br&gt;	opt: Value&lt;br&gt;-}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;opt &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Optional&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;merge&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt; f x &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; opt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using that one is a bit clunky:&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;br&gt;          [Install]&lt;br&gt;          &#39;&#39;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;  ro&lt;br&gt;            types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dependency&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;WantedBy=&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression language-dhall&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall l&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;            i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WantedBy&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I made this following helper, which works better with the config file format:&lt;/p&gt;
&lt;p&gt;:/render/ron.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ro &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;ro&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;opt &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Optional&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;      ro a &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;l &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression language-dhall&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression language-dhall&quot;&gt;f l&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; opt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And can be used like:&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;br&gt;          [Install]&lt;br&gt;          &#39;&#39;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;  ron types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dependency&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;WantedBy&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WantedBy&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you find yourself frequently using the same type (for example, bools), you can make another wrapper for that. The dhall-nethack repo makes significant use of those, see the &lt;a href=&quot;https://github.com/dhall-lang/dhall-nethack/blob/2b7ea599ae09c077bd8bda82cfb3c2601925e300/render/Config.dhall&quot;&gt;config class&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;multiple-exports-per-file&quot;&gt;Multiple exports per file &lt;a class=&quot;direct-link&quot; href=&quot;#multiple-exports-per-file&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dhall likes you to have a single type per file. But sometimes you have a group of types which don&#39;t make sense separately. Or you have a lot of types which are basically just type aliases for primitive types. You can export them in a file like so&lt;/p&gt;
&lt;p&gt;:/ex.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thing0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thing1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then use them like&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;ex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Thing0&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If some of your types reference another, you&#39;ll need to pull the referenced type into a &lt;code&gt;let&lt;/code&gt; higher in the file:&lt;/p&gt;
&lt;p&gt;:/ex.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Type&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ListOfT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Dhall for Config Files</title>
		<link href="https://lilatomic.ca/posts/dhall_for_config_files/"/>
		<updated>2020-11-04T00:00:00+00:00</updated>
		<id>https://lilatomic.ca/posts/dhall_for_config_files/</id>
		<content type="html">&lt;h1 id=&quot;dhall-for-config-files&quot;&gt;Dhall for Config Files &lt;a class=&quot;direct-link&quot; href=&quot;#dhall-for-config-files&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;setting-up-a-dhall-project&quot;&gt;Setting up a Dhall project &lt;a class=&quot;direct-link&quot; href=&quot;#setting-up-a-dhall-project&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s start with the standard directory used in the &lt;a href=&quot;https://github.com/dhall-lang/dhall-nethack/blob/master/types.dhall&quot;&gt;dhall-nethack repo&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;types.dhall : this file is a convenient import of all the types&lt;/li&gt;
&lt;li&gt;types/ : this is where we put all of our type definitions&lt;/li&gt;
&lt;li&gt;render.dhall : this is a convenient way of importing all the render functions&lt;/li&gt;
&lt;li&gt;render/ : this is where we put all of our render functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neat!&lt;/p&gt;
&lt;h2 id=&quot;adding-a-type&quot;&gt;Adding a type &lt;a class=&quot;direct-link&quot; href=&quot;#adding-a-type&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add your type as a record in a file under the :/types/ directory.&lt;/p&gt;
&lt;p&gt;:/types/Install.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WantedBy&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you need to reference another type in this type, you can use an import, like &lt;code&gt;./TypeName.dhall&lt;/code&gt;. Since we&#39;re in the folder with all of our types, we can just use access to the local directory.&lt;br&gt;
:/types/SystemdUnit.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Register your type in :/types.&lt;/p&gt;
&lt;p&gt;:/types.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SystemdUnit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SystemdUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can now use your type by importing the :/types.dhall file:&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; t&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SystemdUnit&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;me&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExecStart&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/usr/bin/bash pwd&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WantedBy&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;multi_user.target&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;me&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExecStart&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/usr/bin/bash pwd&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WantedBy&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;multi_user.target&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;adding-a-renderer-for-a-type&quot;&gt;Adding a renderer for a type &lt;a class=&quot;direct-link&quot; href=&quot;#adding-a-renderer-for-a-type&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you need to output to a format other than JSON or YAML, you&#39;ll need to write your renderers and pass it through &lt;code&gt;dhall text&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add a renderer for your type in a file under the :/render/ directory. This is a function which takes one of your type and returns Text. You can import your type with all types through the phrase &lt;code&gt;let types = ../types.dhall&lt;/code&gt;, or you can use a direct import with &lt;code&gt;../types/YourType.dhall&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;:/render/Install.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; types &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;br&gt;      [Install]&lt;br&gt;      WantedBy=&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression language-dhall&quot;&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WantedBy&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &#39;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you need to reference another renderer in this renderer, you can do that with a simple import, like &lt;code&gt;./Service.dhall&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Register the renderer in the :/render.dhall file&lt;/p&gt;
&lt;p&gt;:/reder.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;render&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;render&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;render&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SystemdUnit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;render&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SystemdUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can now use your renderers by importing them with &lt;code&gt;./render.dhall&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Render&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;reder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; t&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SystemdUnit&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;me&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExecStart&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/usr/bin/bash pwd&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WantedBy&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;multi_user.target&quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;token class-name&quot;&gt;Render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SystemdUnit&lt;/span&gt; t&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And you can run the dhall with &lt;code&gt;dhall text&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; dhall text --file f.dhall&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Unit&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;hello&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Service&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;me&lt;br&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/bash &lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Install&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;multi_user.target&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have a standard format you&#39;re building to, you can create a helper for easier importing. The example builds systemd unit files, so we might create one like&lt;/p&gt;
&lt;p&gt;:/toSystemdUnit&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;render&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SystemdUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;adding-examples&quot;&gt;Adding examples &lt;a class=&quot;direct-link&quot; href=&quot;#adding-examples&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everyone loves seeing examples of how to use your stuff, so let&#39;s add those. They&#39;re just a file located in the expected directory :/examples&lt;/p&gt;
&lt;p&gt;:/examples/templated_unit.dhall&lt;/p&gt;
&lt;pre class=&quot;language-dhall&quot;&gt;&lt;code class=&quot;language-dhall&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&lt;/span&gt;types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dhall&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; jupyterhub_unit&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Systemd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SystemdUnit&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;λ&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config_location &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;→&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;JupyterHub&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jupyterhub&quot;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExecStart&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/opt/jupyterhub/bin/jupyterhub -f &lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression language-dhall&quot;&gt;config_location&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Install&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WantedBy&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;multi_user.target&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;  jupyterhub_unit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then we can invoke this from the command line, with something like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./render/SystemdUnit.dhall (./examples/templated_unit.dhall &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;/opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;)&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; dhall text&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or with our helper renderer:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./toSystemdUnit.dhall (./examples/templated_unit.dhall &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;/opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;)&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; dhall text&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>This is my first post.</title>
		<link href="https://lilatomic.ca/posts/firstpost/"/>
		<updated>2020-09-30T00:00:00+00:00</updated>
		<id>https://lilatomic.ca/posts/firstpost/</id>
		<content type="html">&lt;h2 id=&quot;what&#39;s-happening-here&quot;&gt;What&#39;s happening here &lt;a class=&quot;direct-link&quot; href=&quot;#what&#39;s-happening-here&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Couple things I&#39;ll be doing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filling in practical documentation : sometimes you want to know how to use a technology to &lt;em&gt;solve a problem&lt;/em&gt;, not just in the abstract. As I solve problems, I&#39;ll be putting the solution here&lt;/li&gt;
&lt;li&gt;Getting into the air howtos : there are a lot of tutorials which are the most basic of &amp;quot;How to use technology X&amp;quot;. But often there&#39;s a significant gap to actually using that effectively. So these Howto articles will go through using a tool more indepth.&lt;/li&gt;
&lt;li&gt;Reading reports : Mostly so I don&#39;t forget the things I&#39;ve read, and maybe they&#39;ll be useful for you too.&lt;/li&gt;
&lt;li&gt;Ideas (mostly about software) : I have ideas, and while they&#39;re not all good, some of them might be interesting.&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
</feed>
