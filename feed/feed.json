{
  "version": "https://jsonfeed.org/version/1",
  "title": "lilatomic",
  "home_page_url": "https://lilatomic.ca/",
  "feed_url": "https://lilatomic.ca/feed/feed.json",
  "description": "A place for my things",
  "author": {
    "name": "lilatomic",
    "url": "https://lilatomic.ca/about-me/"
  },
  "items": [{
      "id": "https://lilatomic.ca/posts/azure_function_durable_testing/",
      "url": "https://lilatomic.ca/posts/azure_function_durable_testing/",
      "title": "Testing Azure Durable Functions in Python",
      "content_html": "<!-- prettier-ignore-start -->\n<!-- prettier-ignore-end -->\n<h1 id=\"testing-azure-durable-functions-in-python\" tabindex=\"-1\">Testing Azure Durable Functions in Python <a class=\"direct-link\" href=\"#testing-azure-durable-functions-in-python\">#</a></h1>\n<p><a href=\"#making-a-useful-mocking-library\">TLDR</a></p>\n<p>Azure Durable Functions allow you to use Azure Serverless Functions to make workflows and to implement a number of standard patterns for enterprise systems. Obviously, we'd like to test our code. But the Serverless paradigm does not lend itself well to rapid cycle times and deep testing. Every deploy-test-evaluate cycle to a testing instance in Azure takes about 5 minutes, especially if you've bought into the whole stack and are monitoring with AppInsights. Plus, it's difficult to test for error conditions if you have to actually produce them in an environment rather than being able to mock them in. Wouldn't it be nice if we could test these function like they were normal functions with all the techniques and tools that we developed for those?</p>\n<p>Forunately, Azure Functions are amenable to this. But most of the examples are wrong.</p>\n<h2 id=\"background-%3A-python-generators\" tabindex=\"-1\">Background : Python Generators <a class=\"direct-link\" href=\"#background-%3A-python-generators\">#</a></h2>\n<p>ADFs make use of Python generators to invoke other functions. Here's an example from the <a href=\"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-sequence?tabs=python\">tutorial</a>:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\">result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> context<span class=\"token punctuation\">.</span>call_activity<span class=\"token punctuation\">(</span><span class=\"token string\">'E1_SayHello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tokyo\"</span><span class=\"token punctuation\">)</span></span></code></pre>\n<p>If you're only a little familiar with Python generators, you've probably seen them as a way to generate a (possible infinite) sequence of values. The example from the <a href=\"https://wiki.python.org/moin/Generators\">Python wiki</a> generates a series of numbers up to a value:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">first_n</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tnum <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">while</span> num <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">yield</span> num</span>\n<span class=\"highlight-line\">\t\tnum <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></span></code></pre>\n<p>The syntax here is a bit different than the one used in the <abbr title=\"Azure Durable Function\">ADF</abbr>, in that the return of the yield statement is discarded. If you're more familiar with Python generators, you might know that the <code>yield</code> statement can have a return value if you're using it to send values <em>to</em> a generator and get a return from it using the <code>send</code> keyword:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">useful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tn <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tx <span class=\"token operator\">=</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span></span>\n<span class=\"highlight-line\">\t\tn <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> x</span></code></pre>\n<p>We can then use it with</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> g <span class=\"token operator\">=</span> useful<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># prime the generator</span></span>\n<span class=\"highlight-line\"><span class=\"token number\">0</span></span>\n<span class=\"highlight-line\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token number\">84</span></span></code></pre>\n<p>But this is actually hiding some complexity, which we can see if we instrument this function. We could use print statements, but we're going to need some more sophisticated instrumentation later, so we're instead going to just push things onto a list:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\">e <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\te<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">useful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tr <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span>\n<span class=\"highlight-line\">\tlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"init\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"start of loop\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tx <span class=\"token operator\">=</span> r <span class=\"token operator\">*</span> <span class=\"token number\">2</span></span>\n<span class=\"highlight-line\">\t\tlog<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"computation done: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>r<span class=\"token punctuation\">}</span></span><span class=\"token string\"> * 2 = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tr <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> x</span>\n<span class=\"highlight-line\">\t\tlog<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"yielded </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, got </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>r<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></span></code></pre>\n<p>We can test this out with</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\">g <span class=\"token operator\">=</span> useful<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">log<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">log<span class=\"token punctuation\">(</span><span class=\"token string\">\"sending 10\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">log<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">log<span class=\"token punctuation\">(</span><span class=\"token string\">\"sending 11\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">log<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></code></pre>\n<p>This gives us about what we'd expect:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token punctuation\">[</span><span class=\"token string\">'init'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'start of loop'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'computation done: 0 * 2 = 0'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'sending 10'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'yielded x=0, got r=10'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'start of loop'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'computation done: 10 * 2 = 20'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'sending 11'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'yielded x=20, got r=11'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'start of loop'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'computation done: 11 * 2 = 22'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token number\">22</span><span class=\"token punctuation\">]</span></span></code></pre>\n<p>What complexity is that hiding? From one perspective, none. This is exactly what the <code>send</code> keyword was built for. Of course this is how you build coroutines. But there is a key difference between a coroutine and an <abbr title=\"Azure Durable Function\">ADF</abbr>: the <abbr title=\"Azure Durable Function\">ADF</abbr> is the one doing the driving. That is, in this example, we sent values to the generator and got results back; but in an <abbr title=\"Azure Durable Function\">ADF</abbr>, the generator submits tasks nebulously and gets the results back. This is completely backwards. For example, we normally have a function that looks something like this:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> azure<span class=\"token punctuation\">.</span>functions <span class=\"token keyword\">as</span> func</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> azure<span class=\"token punctuation\">.</span>durable_functions <span class=\"token keyword\">as</span> df</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">orchestrator_function</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> df<span class=\"token punctuation\">.</span>DurableOrchestrationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tresult1 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> context<span class=\"token punctuation\">.</span>call_activity<span class=\"token punctuation\">(</span><span class=\"token string\">'E1_SayHello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tokyo\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tresult2 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> context<span class=\"token punctuation\">.</span>call_activity<span class=\"token punctuation\">(</span><span class=\"token string\">'E1_SayHello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Seattle\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tresult3 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> context<span class=\"token punctuation\">.</span>call_activity<span class=\"token punctuation\">(</span><span class=\"token string\">'E1_SayHello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"London\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>result1<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">,</span> result3<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">main <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>Orchestrator<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>orchestrator_function<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>So what happens if we make a generator which looks like that?</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">workflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"init\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span>\n<span class=\"highlight-line\">\tr <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> x</span>\n<span class=\"highlight-line\">\tlog<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"yielded </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, got </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>r<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tx <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span>\n<span class=\"highlight-line\">\tr <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> x</span>\n<span class=\"highlight-line\">\tlog<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"yielded </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, got </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>r<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tx <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span>\n<span class=\"highlight-line\">\tr <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> x</span>\n<span class=\"highlight-line\">\tlog<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"yielded </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">, got </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>r<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"return value </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>r<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>Let's pretend that we're submitting tasks and we want the number to be added to 100:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\">g <span class=\"token operator\">=</span> workflow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">log<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">log<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">log<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">log<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">102</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>we get</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">  File <span class=\"token string\">\"_includes/resources/azure_functions/durable_testing_python/00_generator_like_sample.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></span>\n<span class=\"highlight-line\">    log<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">102</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">StopIteration<span class=\"token punctuation\">:</span> <span class=\"token number\">102</span></span>\n<span class=\"highlight-line\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> pprint<span class=\"token punctuation\">.</span>pp<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">[</span><span class=\"token string\">'init'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'yielded x=0, got r=100'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'yielded x=1, got r=101'</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"> <span class=\"token string\">'yielded x=2, got r=102'</span><span class=\"token punctuation\">]</span></span></code></pre>\n<p>Well that makes sense. It's a bit weird that the return value comes in the <code>StopIteration</code>, but it's in the documentation for generators.</p>\n<h2 id=\"background-%3A-a-basic-executor\" tabindex=\"-1\">Background : A basic executor <a class=\"direct-link\" href=\"#background-%3A-a-basic-executor\">#</a></h2>\n<p>Let's pretend that instead of mocking out the dispatching, we actually wanted to run the <abbr title=\"Azure Durable Function\">ADF</abbr>. With the knowledge we gained from exploring generators previously, we know that we'll have 3 different conditions to handle:</p>\n<ul>\n<li>the initial task which will be submitted through the priming (with <code>send(None)</code>)</li>\n<li>all the intermediate executions</li>\n<li>the return value which will be sent in a <code>StopIteration</code></li>\n</ul>\n<p>We can then bang out the following executor:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"init executor\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\targ <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"entering loop\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tvalue <span class=\"token operator\">=</span> useful<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\tlog<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\targ <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">except</span> StopIteration <span class=\"token keyword\">as</span> ret<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"stopped iteration\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tlog<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"return value is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ret<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></span></code></pre>\n<p>We can also restart it equivalently as follows, although I'm not sure it's clearer.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"init executor\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tvalue <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"entering loop\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\targ <span class=\"token operator\">=</span> generator<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\tvalue <span class=\"token operator\">=</span> useful<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\tlog<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">except</span> StopIteration <span class=\"token keyword\">as</span> ret<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tlog<span class=\"token punctuation\">(</span><span class=\"token string\">\"stopped iteration\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tlog<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"return value is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ret<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></span></code></pre>\n<p>This simple executor suggests an alternative for mocking the functions that our orchestrator calls out to. Instead of trying to patch those functions, we could simply execute the function-under-test with an executor which will provide the answers we need. This means that we can't use fun mocking libraries out-of-the-box, but it also means that we might not need to use them.</p>\n<h2 id=\"background-%3A-examining-the-source-code\" tabindex=\"-1\">Background : Examining the source code <a class=\"direct-link\" href=\"#background-%3A-examining-the-source-code\">#</a></h2>\n<p>Microsoft has been open-sourcing a lot of their stuff. This is very convenient for them: Every time their documentation is missing something very basic, if it happens to be important enough for a company, that company might pay someone to dig into that code and write up that documentation.</p>\n<p>There are 3 relevant repositories:</p>\n<ul>\n<li><a href=\"https://github.com/Azure/azure-functions-python-worker\">azure-fucntions-python-worker</a> : the thing that loads functions and dispatches calls</li>\n<li><a href=\"https://github.com/Azure/azure-functions-python-library\">azure-functions-python-library</a> : contains various bits for bindings and extensions</li>\n<li><a href=\"https://github.com/Azure/azure-functions-durable-python\">azure-functions-durable-python</a> : the extension for ADFs</li>\n</ul>\n<p>The 3rd is the important one. The executor is called <a href=\"https://github.com/Azure/azure-functions-durable-python/blob/9a02c58616a5de272ea7ad81c7071449b83509ab/azure/durable_functions/models/TaskOrchestrationExecutor.py\">TaskOrchestrationExecutor</a>. You'll notice that you can't find calls which invoke the <code>__next__()</code> method (either the <code>next</code> keyword or hidden in iterable operations, like <code>list(generator)</code>) on the generator itself. But it does call <code>send</code> on that generator <a href=\"https://github.com/Azure/azure-functions-durable-python/blob/9a02c58616a5de272ea7ad81c7071449b83509ab/azure/durable_functions/models/TaskOrchestrationExecutor.py#L214\">here</a>. They do iterate over the <code>history</code> <a href=\"https://github.com/Azure/azure-functions-durable-python/blob/9a02c58616a5de272ea7ad81c7071449b83509ab/azure/durable_functions/models/TaskOrchestrationExecutor.py#L76\">here</a>, but it's not as straightforward as that.</p>\n<h3 id=\"user-code-generator\" tabindex=\"-1\">User code generator <a class=\"direct-link\" href=\"#user-code-generator\">#</a></h3>\n<p>We'll start closest to our code: the <code>resume_user_code</code> function. I'll first point out that they catch the <code>StopIteration</code> and mark that as the function output, just like out little executor. The most interesting part is:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token comment\"># resume orchestration with a resolved task's value</span></span>\n<span class=\"highlight-line\">task_value <span class=\"token operator\">=</span> current_task<span class=\"token punctuation\">.</span>result</span>\n<span class=\"highlight-line\">task_succeeded <span class=\"token operator\">=</span> current_task<span class=\"token punctuation\">.</span>state <span class=\"token keyword\">is</span> TaskState<span class=\"token punctuation\">.</span>SUCCEEDED</span>\n<span class=\"highlight-line\">new_task <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\ttask_value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> task_succeeded <span class=\"token keyword\">else</span> self<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>throw<span class=\"token punctuation\">(</span>task_value<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">self<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>_add_to_open_tasks<span class=\"token punctuation\">(</span>new_task<span class=\"token punctuation\">)</span></span></code></pre>\n<p>It's a bit hard to parse out, but this code uses the <code>send</code> to send the previous result <em>and</em> to get the next task at the same time. Just like our little executor!<br>\nLater, it also shuffles the new task to the current task, and adds it to the list of actions in the <code>context</code>.But if you trace it, you find that this doesnt actually trigger any further execution.</p>\n<h3 id=\"iterating-over-the-tasks\" tabindex=\"-1\">Iterating over the tasks <a class=\"direct-link\" href=\"#iterating-over-the-tasks\">#</a></h3>\n<p>The only iteration we've seen is over the <code>history</code> parameter. This is passed into the <code>TaskOrchestrationExecutor.execute</code> method. You have to dig in to the internals of the <abbr title=\"Azure Durable Function\">ADF</abbr> execution to find where this comes from. Essentially, every time a function is ready to advance, the entire function up to that point will be invoked. Every time a task is created (with <code>yield context.call_activity(...)</code>, for example), that result has been serialised and is passed back into the function. The orchestrator can then advance until it hits a <code>yield</code> statement which creates a new task.</p>\n<p>This replay behaviour is somewhat described in the article on <a href=\"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-code-constraints\">Orchestrator function code constraints</a>. The focus isn't really on the implementation; it's on the natural consequence that only deterministic APIs can be used.</p>\n<p>You can see the replay behaviour for yourself by instrumenting a basic function.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> azure<span class=\"token punctuation\">.</span>durable_functions <span class=\"token keyword\">as</span> df</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Logotron</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">        self<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></span>\n<span class=\"highlight-line\">        self<span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">new_span</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">        self<span class=\"token punctuation\">.</span>i <span class=\"token operator\">+=</span><span class=\"token number\">1</span></span>\n<span class=\"highlight-line\">        self<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">    </span>\n<span class=\"highlight-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">        self<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">logotron <span class=\"token operator\">=</span> Logotron<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">orchestrator_function</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> df<span class=\"token punctuation\">.</span>DurableOrchestrationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">    logotron<span class=\"token punctuation\">.</span>new_span<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">    logotron<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token string\">\"Tokyo\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">    result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> context<span class=\"token punctuation\">.</span>call_activity<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tokyo\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">    logotron<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token string\">\"Seattle\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">    result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> context<span class=\"token punctuation\">.</span>call_activity<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Seattle\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">    logotron<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token string\">\"London\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">    result3 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> context<span class=\"token punctuation\">.</span>call_activity<span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"London\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">    logotron<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">    <span class=\"token keyword\">return</span> logotron<span class=\"token punctuation\">.</span>log</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">main <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>Orchestrator<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>orchestrator_function<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>We then get this as the trace. We <em>also</em> get a <code>Non-Deterministic workflow detected</code> warning, which is True.</p>\n<pre><code>[['Tokyo'],\n ['Tokyo', 'Seattle'],\n ['Tokyo', 'Seattle', 'London'],\n ['Tokyo', 'Seattle', 'London', 'Done']]\n</code></pre>\n<h2 id=\"mocking-durable-functions\" tabindex=\"-1\">Mocking durable functions <a class=\"direct-link\" href=\"#mocking-durable-functions\">#</a></h2>\n<p>With all the background done, it looks like there are 3 parts to the challenge of implementing mocking for <abbr title=\"Azure Durable Function\">ADF</abbr>:</p>\n<ol>\n<li>feeding in a DurableOrchestrationContext</li>\n<li>creating a mock executor</li>\n<li>mocking the evaluation of remote calls</li>\n</ol>\n<h3 id=\"durableorchestrationcontext\" tabindex=\"-1\">DurableOrchestrationContext <a class=\"direct-link\" href=\"#durableorchestrationcontext\">#</a></h3>\n<p>There's a bit of shimming that you have to do to get one of these created, but you can just fake all the values and it seems to work as well as we need it to.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_ctx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> df<span class=\"token punctuation\">.</span>DurableOrchestrationContext<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token triple-quoted-string string\">\"\"\"Create a DurableOrchestrationContext by filling in dummy values \"\"\"</span></span>\n<span class=\"highlight-line\">\tfakeEvent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"EventType\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"EventId\"</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"IsPlayed\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"Timestamp\"</span><span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isoformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> df<span class=\"token punctuation\">.</span>DurableOrchestrationContext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fakeEvent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></span></code></pre>\n<h3 id=\"creating-a-mock-executor\" tabindex=\"-1\">Creating a mock executor <a class=\"direct-link\" href=\"#creating-a-mock-executor\">#</a></h3>\n<p>We've done most of the generator work for the executor. Now we have to build it to actually interpret the Tasks that are given to it. There are a few task types that we have to handle: <code>AtomicTask</code>, <code>WhenAllTask</code>, <code>WhenAnyTask</code>. We can also handle <code>RetryAbleTask</code> (subclass of <code>WhenAllTask</code>) and <code>TimerTask</code> (subclass of <code>AtomicTask</code>) separately if we choose, although I'm going to leave that as a contribution for the reader. Handling these is mostly a matter of dispatching down to the <code>AtomicTask</code>s in the <code>CompoundTask</code>s. After that, we just need to unwrap the requested <code>Action</code> and dispatch that to our mocks.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token triple-quoted-string string\">\"\"\"Execute an orchestrator function with external calls mocked\"\"\"</span></span>\n<span class=\"highlight-line\">\t\tctx <span class=\"token operator\">=</span> make_ctx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tg <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tresult <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\ttask <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\tresult <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_handle<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">except</span> StopIteration <span class=\"token keyword\">as</span> ret<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span>value</span></code></pre>\n<h3 id=\"mocking-the-evaluation-of-remote-calls\" tabindex=\"-1\">Mocking the evaluation of remote calls <a class=\"direct-link\" href=\"#mocking-the-evaluation-of-remote-calls\">#</a></h3>\n<p>The <code>Action</code> itself has 3 properties we care about:</p>\n<ul>\n<li>type (<code>ActionType</code>) : the category of thing we want invoked, like an Activity Function or a SubOrchestrator</li>\n<li>function name : the name of that thing we want invoked</li>\n<li>intput_ : the paylod to send to that function</li>\n</ul>\n<p>So now it's just a matter of building a system which can dispatch the first 2 and pass in the 3rd item. This too isn't hard. One hiccough is that some of the types are sortof equivalent from a unit-testing point of view (<code>CALL_ACTIVITY</code> vs <code>CALL_ACTIVITY_WITH_RETRY</code>). We don't need to handle <code>WHEN_ANY</code> or <code>WHEN_ALL</code> because we expand those into the component tasks, although we do need to add a way of determining which task to resolve.</p>\n<p>There's honestly not much special with this code, so I'm just going to skip talking about it. you can see the whole resources in the repo.</p>\n<h2 id=\"making-a-useful-mocking-library\" tabindex=\"-1\">Making a useful mocking library <a class=\"direct-link\" href=\"#making-a-useful-mocking-library\">#</a></h2>\n<p>This executor is competent enough at walking through a function, but it lacks the ability to intelligently verify calls like other popular mocking libraries. Good thing all of our functions accept Task objects which contain the function invocation and the argument.<br>\nWe should try for a similar API to <code>unittest.mock</code>. Implementing it is straightforward, although does require a bit of gruntwork. Reporting results is where most of the utility comes from, and I'll admit that I skimped on that.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> copy</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> datetime</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> itertools</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> json</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> operator</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> random</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> dataclasses <span class=\"token keyword\">import</span> dataclass</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Callable<span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">,</span> NewType<span class=\"token punctuation\">,</span> Union</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> azure<span class=\"token punctuation\">.</span>durable_functions <span class=\"token keyword\">as</span> df</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> azure<span class=\"token punctuation\">.</span>durable_functions<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>actions <span class=\"token keyword\">as</span> dfactions</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> azure<span class=\"token punctuation\">.</span>durable_functions<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>Task <span class=\"token keyword\">as</span> dftask</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_ctx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> df<span class=\"token punctuation\">.</span>DurableOrchestrationContext<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token triple-quoted-string string\">\"\"\"Create a DurableOrchestrationContext by filling in dummy values \"\"\"</span></span>\n<span class=\"highlight-line\">\tfakeEvent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"EventType\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"EventId\"</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"IsPlayed\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"Timestamp\"</span><span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isoformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> df<span class=\"token punctuation\">.</span>DurableOrchestrationContext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fakeEvent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@dataclass</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AZDFMock</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\ttype_<span class=\"token punctuation\">:</span> dfactions<span class=\"token punctuation\">.</span>ActionType</span>\n<span class=\"highlight-line\">\tname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span></span>\n<span class=\"highlight-line\">\tfn<span class=\"token punctuation\">:</span> Callable</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">Handlers <span class=\"token operator\">=</span> NewType<span class=\"token punctuation\">(</span><span class=\"token string\">\"Handlers\"</span><span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">[</span>dfactions<span class=\"token punctuation\">.</span>ActionType<span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Callable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">mocks2handlers</span><span class=\"token punctuation\">(</span>mocks<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>AZDFMock<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Handlers<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tby_type <span class=\"token operator\">=</span> itertools<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span>mocks<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>operator<span class=\"token punctuation\">.</span>attrgetter<span class=\"token punctuation\">(</span><span class=\"token string\">\"type_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\thandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type_<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>mock<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">:</span> mock<span class=\"token punctuation\">.</span>fn <span class=\"token keyword\">for</span> mock <span class=\"token keyword\">in</span> mocks<span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> type_<span class=\"token punctuation\">,</span> mocks <span class=\"token keyword\">in</span> by_type<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> handlers</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">combine_handlers</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tcombined <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">for</span> type_ <span class=\"token keyword\">in</span> dfactions<span class=\"token punctuation\">.</span>ActionType<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tcombined<span class=\"token punctuation\">[</span>type_<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">**</span>this<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>type_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>that<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>type_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> combined</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MockExecutor</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">:</span> Handlers<span class=\"token punctuation\">,</span> _select_winning_task<span class=\"token punctuation\">:</span> dftask<span class=\"token punctuation\">.</span>WhenAnyTask <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>handlers <span class=\"token operator\">=</span> handlers</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>_select_winning_task <span class=\"token operator\">=</span> _select_winning_task <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>_select_random_task</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>_calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>_invocations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@staticmethod</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_select_random_task</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">:</span> dftask<span class=\"token punctuation\">.</span>WhenAnyTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token triple-quoted-string string\">\"\"\"Resolve a WhenAnyTask by selecting a random Task. This is used as the default\"\"\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@staticmethod</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_collapse_types</span><span class=\"token punctuation\">(</span>type_<span class=\"token punctuation\">:</span> dfactions<span class=\"token punctuation\">.</span>ActionType<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> dfactions<span class=\"token punctuation\">.</span>ActionType<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tremapped <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\tdfactions<span class=\"token punctuation\">.</span>ActionType<span class=\"token punctuation\">.</span>CALL_ACTIVITY_WITH_RETRY<span class=\"token punctuation\">:</span> dfactions<span class=\"token punctuation\">.</span>ActionType<span class=\"token punctuation\">.</span>CALL_ACTIVITY<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\tdfactions<span class=\"token punctuation\">.</span>ActionType<span class=\"token punctuation\">.</span>CALL_SUB_ORCHESTRATOR_WITH_RETRY<span class=\"token punctuation\">:</span> dfactions<span class=\"token punctuation\">.</span>ActionType<span class=\"token punctuation\">.</span>CALL_SUB_ORCHESTRATOR<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> type_ <span class=\"token keyword\">in</span> remapped<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> remapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> type_</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@classmethod</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> mocks<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span>AZDFMock<span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span>AZDFMock<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"MockExecutor\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token triple-quoted-string string\">\"\"\"Create an executor with handlers taken from mocks\"\"\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>mocks<span class=\"token punctuation\">,</span> AZDFMock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tmocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>mocks<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">(</span>mocks2handlers<span class=\"token punctuation\">(</span>mocks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@classmethod</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">lax</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> default<span class=\"token punctuation\">:</span> Callable <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"MockExecutor\"</span><span class=\"token punctuation\">:</span></span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Create an executor where all not-found handlers will be passed to a default.\n\t\tIf the `default` is not supplied, it defaults to just returning the arguments.\"\"\"</span>\n<span class=\"highlight-line\">\t\tdefault_by_type <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tdefault_handler <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> default_by_type<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">(</span>default_handler<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">with_handlers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">:</span> Handlers<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"MockExecutor\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token triple-quoted-string string\">\"\"\"Specialise a copy of this executor with another handler tree\"\"\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> MockExecutor<span class=\"token punctuation\">(</span>combine_handlers<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">with_mock</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mock<span class=\"token punctuation\">:</span> Union<span class=\"token punctuation\">[</span>AZDFMock<span class=\"token punctuation\">,</span> Iterable<span class=\"token punctuation\">[</span>AZDFMock<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token triple-quoted-string string\">\"\"\"Specialise a copy of this executor with other mocks\"\"\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>mock<span class=\"token punctuation\">,</span> AZDFMock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tmock <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>mock<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> MockExecutor<span class=\"token punctuation\">(</span>combine_handlers<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">,</span> mocks2handlers<span class=\"token punctuation\">(</span>mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token triple-quoted-string string\">\"\"\"Execute an orchestrator function with external calls mocked\"\"\"</span></span>\n<span class=\"highlight-line\">\t\tctx <span class=\"token operator\">=</span> make_ctx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tg <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tresult <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\ttask <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\tresult <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_handle<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">except</span> StopIteration <span class=\"token keyword\">as</span> ret<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">.</span>value</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_handle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">:</span> dftask<span class=\"token punctuation\">.</span>TaskBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>_invocations<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> dftask<span class=\"token punctuation\">.</span>AtomicTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_handle_task<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> dftask<span class=\"token punctuation\">.</span>WhenAllTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_handle_task_all<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> dftask<span class=\"token punctuation\">.</span>WhenAnyTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_handle_task_any<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_handle_task</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>_calls<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_handle_action<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>_get_action<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_handle_task_all</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">:</span> dftask<span class=\"token punctuation\">.</span>WhenAllTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_handle_task<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> task<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_handle_task_any</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">:</span> dftask<span class=\"token punctuation\">.</span>WhenAnyTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\twinning_task <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_select_winning_task<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tresult <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_handle_task<span class=\"token punctuation\">(</span>winning_task<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>winning_task<span class=\"token punctuation\">,</span> <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> winning_task</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_handle_action</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> dfactions<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>_collapse_types<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>action_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span></span>\n<span class=\"highlight-line\">\t\t\taction<span class=\"token punctuation\">.</span>function_name</span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>input_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">invocations</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"\n<span class=\"highlight-line\">\t\tRMIs that are submitted for execution through `yield` statements.</span>\n<span class=\"highlight-line\">\t\tWhenAllTasks will have subcalls nested within it.</span>\n<span class=\"highlight-line\">\t\tWhenAnyTasks will have _all_ of their subcalls nested as children</span>\n\t\t\"\"\"</span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_invocations</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">calls</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"\n<span class=\"highlight-line\">\t\tRMIs that are actually executed</span>\n<span class=\"highlight-line\">\t\t`WhenAllTask`s will not be included, but their children will</span>\n<span class=\"highlight-line\">\t\t`WhenAnyTask`s will not be included, and only the \"winning\" task will be included</span>\n\t\t\"\"\"</span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_calls</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_find_calls_matching_action</span><span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">:</span> Callable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>dftask<span class=\"token punctuation\">.</span>TaskBase<span class=\"token punctuation\">,</span> dfactions<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>dftask<span class=\"token punctuation\">.</span>TaskBase<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tcalls_and_actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>_get_action<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># matched = next(ca for ca in calls_and_actions if predicate(*ca), (None, None))</span></span>\n<span class=\"highlight-line\">\t\tmatched <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> ca<span class=\"token punctuation\">:</span> predicate<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> calls_and_actions<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\ttasks <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> ca<span class=\"token punctuation\">:</span> ca<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matched<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_find_called</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action_type<span class=\"token punctuation\">,</span> function_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>dftask<span class=\"token punctuation\">.</span>TaskBase<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">_p</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>action_type <span class=\"token operator\">==</span> action_type <span class=\"token keyword\">and</span> a<span class=\"token punctuation\">.</span>function_name <span class=\"token operator\">==</span> function_name</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_find_calls_matching_action<span class=\"token punctuation\">(</span>_p<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">assert_called</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action_type<span class=\"token punctuation\">,</span> function_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_find_called<span class=\"token punctuation\">(</span>action_type<span class=\"token punctuation\">,</span> function_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">assert_called_once</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action_type<span class=\"token punctuation\">,</span> function_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_find_called<span class=\"token punctuation\">(</span>action_type<span class=\"token punctuation\">,</span> function_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_find_called_with</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> dfactions<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\taction_as_json <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">_p</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> action_as_json</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_find_calls_matching_action<span class=\"token punctuation\">(</span>_p<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">assert_called_with</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> dfactions<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tc <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">assert</span> c<span class=\"token punctuation\">.</span>_get_action<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> action<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">assert_called_once_with</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> dfactions<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>assert_called_once<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>action_type<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>function_name<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_find_called_with<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">assert_any_call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> dfactions<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_find_called_with<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">assert_has_calls</span><span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">:</span> Iterable<span class=\"token punctuation\">[</span>dfactions<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> any_order<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> any_order<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">for</span> action <span class=\"token keyword\">in</span> actions<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tself<span class=\"token punctuation\">.</span>assert_any_call<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tremaining_calls <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\tremaining_actions <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">find_next_call_matching</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> dfactions<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\tcall <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>remaining_calls<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token keyword\">if</span> call<span class=\"token punctuation\">.</span>_get_action<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t<span class=\"token keyword\">return</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">for</span> action <span class=\"token keyword\">in</span> remaining_actions<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\tfind_next_call_matching<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\tunmatched <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>remaining_actions<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token keyword\">raise</span> AssertionError<span class=\"token punctuation\">(</span><span class=\"token string\">\"not all calls matched\"</span><span class=\"token punctuation\">,</span> unmatched<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">assert_not_called</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action_type<span class=\"token punctuation\">,</span> function_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_find_called<span class=\"token punctuation\">(</span>action_type<span class=\"token punctuation\">,</span> function_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></span>\n<span class=\"highlight-line\">\t\t</span>\n<span class=\"highlight-line\"></span></code></pre>\n",
      "date_published": "2021-11-30T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/eleventy_include_code_verbatim/",
      "url": "https://lilatomic.ca/posts/eleventy_include_code_verbatim/",
      "title": "Eleventy Include Code File Verbatim",
      "content_html": "<h1 id=\"eleventy-include-code-file-verbatim\" tabindex=\"-1\">Eleventy Include Code File Verbatim <a class=\"direct-link\" href=\"#eleventy-include-code-file-verbatim\">#</a></h1>\n<p>I didn't find what I needed, so I wrote it. It was pretty simple. In your &quot;.eleventy.js&quot; file, somewhere in the big <code>module.exports</code> function, add this little snippet:</p>\n<h2 id=\"whole-file\" tabindex=\"-1\">Whole file <a class=\"direct-link\" href=\"#whole-file\">#</a></h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"highlight-line\"><span class=\"token keyword\">const</span> resource_path <span class=\"token operator\">=</span> <span class=\"token string\">\"_includes/resources/\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">eleventyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">addShortcode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"include_raw\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>resource_path <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>Then just toss your files into something in the <code>resource_path</code> folder and reference them from your code like so:</p>\n<pre class=\"language-jinja2\"><code class=\"language-jinja2\"><span class=\"highlight-line\">\t```python</span>\n<span class=\"highlight-line\">\t<span class=\"token jinja2 language-jinja2\"><span class=\"token delimiter punctuation\">{%</span> <span class=\"token tag keyword\">include_raw</span> <span class=\"token string\">\"ansible_plugins/filter/filter_as_function.py\"</span> <span class=\"token delimiter punctuation\">%}</span></span></span>\n<span class=\"highlight-line\">\t```</span></code></pre>\n<h2 id=\"partial-files\" tabindex=\"-1\">Partial files <a class=\"direct-link\" href=\"#partial-files\">#</a></h2>\n<p>I found that I wanted to include only a few lines from a file, but still wanted those lines to exist in context. This allows me to test those lines. It also allows other tools to act on the full file. The motivating example was Bicep files, which get rendered to ARM templates. These have to be syntactically valid to be rendered. But if all I wanted to show was how a line is rendered, including all the boilerplate (especially in the verbose ARM template) is just clutter for the article. So I modified the above to have this:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"highlight-line\"><span class=\"token keyword\">const</span> resource_path <span class=\"token operator\">=</span> <span class=\"token string\">\"_includes/resources/\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">eleventyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">addShortcode</span><span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t<span class=\"token string\">\"include_raw\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> start <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">let</span> lines <span class=\"token operator\">=</span> fs</span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>resource_path <span class=\"token operator\">+</span> path<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">var</span> selected_lines<span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\tselected_lines <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\tselected_lines <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>selected_lines<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>This is backwards-compatible with the initial pass. The unusual bounds (<a href=\"https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html\">non-dijkstra</a>) make it easy to just look at the line numbers in an editor in the 1-starting convention used by everyone. I would try to persuade everyone to stop using the convention we all make fun of Matlab for, but I already have enough trouble getting <a href=\"https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/\">the actual accessibility feature of tabs</a> adopted.</p>\n",
      "date_published": "2021-11-15T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/bicep/",
      "url": "https://lilatomic.ca/posts/bicep/",
      "title": "Having fun with Azure Bicep",
      "content_html": "<h1 id=\"having-fun-with-azure-bicep\" tabindex=\"-1\">Having fun with Azure Bicep <a class=\"direct-link\" href=\"#having-fun-with-azure-bicep\">#</a></h1>\n<p>Bicep is a different way of deploying resources on Azure. It is hopefully less painful than ARM templates. Following are my thoughts as I evaluate bicep as something we should incorporate in our stack. Hopefully they're useful for you if you're doing the same.</p>\n<p>First I have to make fun of Azure for creating their own language instead of embedding it in existing languages like AWS did with the CDK. In the FAQ they have this gem explaining their reasoning:</p>\n<p>Why create a new language instead of using an existing one?</p>\n<p>[...] We decided our target audience would find it easier to learn Bicep rather than getting started with another language.</p>\n<p>I don't think creating a new language is the way to not have to get started with a new language.</p>\n<h2 id=\"some-basic-bicep\" tabindex=\"-1\">Some basic BICEP <a class=\"direct-link\" href=\"#some-basic-bicep\">#</a></h2>\n<p>You can start by using bicep as less verbose ARM template right away. You can just put everything in bicep format, which requires a bit less ceremony than ARM templates.</p>\n<pre class=\"language-bicep\"><code class=\"language-bicep\"><span class=\"highlight-line\"><span class=\"token keyword\">resource</span> storageAccount <span class=\"token string\">'Microsoft.Storage/storageAccounts@2021-06-01'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'biceptest27924'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">location</span><span class=\"token operator\">:</span> <span class=\"token string\">'canadaeast'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">sku</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Standard_LRS'</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">'StorageV2'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">accessTier</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hot'</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">resource</span> appServicePlan <span class=\"token string\">'Microsoft.Web/serverfarms@2021-02-01'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'biceptest27924'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">location</span><span class=\"token operator\">:</span> <span class=\"token string\">'canadaeast'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">sku</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'F1'</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">resource</span> appServiceApp <span class=\"token string\">'Microsoft.Web/sites@2021-02-01'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'biceptest27924'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">location</span><span class=\"token operator\">:</span> <span class=\"token string\">'canadaeast'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">serverFarmId</span><span class=\"token operator\">:</span> appServicePlan<span class=\"token punctuation\">.</span>id</span>\n<span class=\"highlight-line\">    <span class=\"token property\">httpsOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>You can then render them to ARM templates with <code>az bicep build -f</code></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"highlight-line\"><span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">\"contentVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0.0\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">\"metadata\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">\"_generator\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bicep\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.4.1008.15138\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"templateHash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"13344829521051671124\"</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">\"functions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">\"resources\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Microsoft.Storage/storageAccounts\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"apiVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-06-01\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"biceptest27924\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"location\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"canadaeast\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"sku\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Standard_LRS\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"StorageV2\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">        <span class=\"token property\">\"accessTier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hot\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Microsoft.Web/serverfarms\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"apiVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-02-01\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"biceptest27924\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"location\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"canadaeast\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"sku\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"F1\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Microsoft.Web/sites\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"apiVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-02-01\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"biceptest27924\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"location\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"canadaeast\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">        <span class=\"token property\">\"serverFarmId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[resourceId('Microsoft.Web/serverfarms', 'biceptest27924')]\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">        <span class=\"token property\">\"httpsOnly\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"highlight-line\">        <span class=\"token string\">\"[resourceId('Microsoft.Web/serverfarms', 'biceptest27924')]\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>Bicep also allows makes variables slightly less of a pain</p>\n<pre class=\"language-bicep\"><code class=\"language-bicep\"><span class=\"highlight-line\"><span class=\"token keyword\">param</span> basename <span class=\"token datatype class-name\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'biceptest'</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">var</span> u <span class=\"token operator\">=</span> <span class=\"token function\">uniqueString</span><span class=\"token punctuation\">(</span><span class=\"token function\">resourceGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">var</span> location <span class=\"token operator\">=</span> <span class=\"token function\">resourceGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>location</span></code></pre>\n<p>and then you can use them pretty easily with <code>${}</code> interpolation syntax</p>\n<pre class=\"language-bicep\"><code class=\"language-bicep\"><span class=\"highlight-line\">  name<span class=\"token operator\">:</span> <span class=\"token interpolated-string\"><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">basename</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">u</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span></span></code></pre>\n<p>which renders to this in ARM template so you don't have to write this:</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"highlight-line\">      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[format('{0}{1}', parameters('basename'), variables('u'))]\"</span><span class=\"token punctuation\">,</span></span></code></pre>\n<p>The variable system is pretty underwhelming, and closely matches the capabilities of ARM templates. For example, you can have Object types, but you can't type their fields. There are some more advanced functions, like <code>intersection</code> and <code>union</code>, but nothing approaching the capabilities of Dhall. Decorators allow for constraining the values of parameters, but they too aren't anything special. They're missing some fairly basic operations (like forcing alpha-numeric) and therefore can't describe most of the contstraints on Azure resources. This limitation is probably why there aren't decorators to enforce the constraints on azure resources. For example, you can't specify that a parameter must be a valid storageAccount access tier, perhaps by doing something like <code>@Microsoft.Storage/storageAccounts@2021-06-01.properties.accessTier</code>. The <code>@description</code> parameter is said to in some way be used in cases where bicep templates are made available in the portal. Parameter files are still JSON-only. There also isn't a command to scaffold to create a parameters file ready to be filled, which would be useful, since it knows which parameters need to be defined.</p>\n<p>One neat feature is that you can involve a keyvault as a secret-store in the bicep template. It's limited to only assigning to a module parameter with a secure decorator. And you also can't push values to the keyvault. So again, it's basically like a slightly more convenient way of writing ARM templates.</p>\n<h2 id=\"control-flow\" tabindex=\"-1\">Control flow <a class=\"direct-link\" href=\"#control-flow\">#</a></h2>\n<p>Control flow is honestly pretty bad. It's one of the places where the veil between Bicep and ARM grows thin. You can conditionally deploy resources, but this is applied at the resource level. For an example of why this is bad: If you were in the tutorial and wanted to enable SQL auditing, you would need to create an &quot;auditSettings&quot; resource and a &quot;storageAccounts&quot; resource. If you wanted to conditionally enable this in production, you would need to add a condition for both of these. You would also need to add the condition to every parameter referencing the conditionally deployed resource. So instead of 1 condition, we have 4. And that's just in this example:</p>\n<pre class=\"language-bicep\"><code class=\"language-bicep\"><span class=\"highlight-line\"><span class=\"token keyword\">resource</span> auditStorageAccount <span class=\"token string\">'Microsoft.Storage/storageAccounts@2021-02-01'</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>auditingEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> auditStorageAccountName</span>\n<span class=\"highlight-line\">  <span class=\"token property\">location</span><span class=\"token operator\">:</span> location</span>\n<span class=\"highlight-line\">  <span class=\"token property\">sku</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">name</span><span class=\"token operator\">:</span> storageAccountSkuName</span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">'StorageV2'</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">resource</span> auditingSettings <span class=\"token string\">'Microsoft.Sql/servers/auditingSettings@2020-11-01-preview'</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>auditingEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">parent</span><span class=\"token operator\">:</span> sqlServer</span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">state</span><span class=\"token operator\">:</span> <span class=\"token string\">'Enabled'</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">storageEndpoint</span><span class=\"token operator\">:</span> auditingEnabled <span class=\"token operator\">?</span> auditStorageAccount<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>primaryEndpoints<span class=\"token punctuation\">.</span>blob <span class=\"token operator\">:</span> <span class=\"token string\">''</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">storageAccountAccessKey</span><span class=\"token operator\">:</span> auditingEnabled <span class=\"token operator\">?</span> <span class=\"token function\">listKeys</span><span class=\"token punctuation\">(</span>auditStorageAccount<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> auditStorageAccount<span class=\"token punctuation\">.</span>apiVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">:</span> <span class=\"token string\">''</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>Instead, we could have been able to define something like:</p>\n<pre class=\"language-bicep\"><code class=\"language-bicep\"><span class=\"highlight-line\"><span class=\"token comment\">// reminder, this doesn't work</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>auditingEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token keyword\">resource</span> auditStorageAccount <span class=\"token string\">'Microsoft.Storage/storageAccounts@2021-02-01'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">name</span><span class=\"token operator\">:</span> auditStorageAccountName</span>\n<span class=\"highlight-line\">    <span class=\"token property\">location</span><span class=\"token operator\">:</span> location</span>\n<span class=\"highlight-line\">    <span class=\"token property\">sku</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">name</span><span class=\"token operator\">:</span> storageAccountSkuName</span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">'StorageV2'</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">  <span class=\"token keyword\">resource</span> auditingSettings <span class=\"token string\">'Microsoft.Sql/servers/auditingSettings@2020-11-01-preview'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">parent</span><span class=\"token operator\">:</span> sqlServer</span>\n<span class=\"highlight-line\">    <span class=\"token property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">state</span><span class=\"token operator\">:</span> <span class=\"token string\">'Enabled'</span></span>\n<span class=\"highlight-line\">      <span class=\"token property\">storageEndpoint</span><span class=\"token operator\">:</span> auditStorageAccount<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>primaryEndpoints<span class=\"token punctuation\">.</span>blob</span>\n<span class=\"highlight-line\">      <span class=\"token property\">storageAccountAccessKey</span><span class=\"token operator\">:</span> <span class=\"token function\">listKeys</span><span class=\"token punctuation\">(</span>auditStorageAccount<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> auditStorageAccount<span class=\"token punctuation\">.</span>apiVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value</span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>But we can't, because Bicep is not a language for deploying Azure resources, it's a language for creating ARM templates. It is simply not able to support constructs which are not representable to ARM templates. It is also not able to support partial application (binding some arguments), so that a Bicep file could generate a slightly simpler Bicep file.</p>\n<p>A further limitation is that you cannot define a resource twice, even if the conditions are mutually exclusive. You also can't use the ternary to select between 2 separate definitions for the same resource. So if you wanted to change a storage account's sku, accessTier, name, and many other parameters, you have to apply the ternary to each of those.</p>\n<p>You seem to be able to use the ternary to fudge something by reassigning to a variable, but it's messy. Also, you can't give the different versions of the resource the same name, because obviously that clashes.</p>\n<pre class=\"language-bicep\"><code class=\"language-bicep\"><span class=\"highlight-line\"><span class=\"token keyword\">var</span> appServicePlan <span class=\"token operator\">=</span> isProd <span class=\"token operator\">?</span> prodAppServicePlan <span class=\"token operator\">:</span> testAppServicePlan</span></code></pre>\n<p>The for-loops are functional. You get the item, the index, and also an opportunity to filter things with an <code>if</code> statement. The syntax is similar to Python for-comprehensions. There are some fancy features related to parallelism, like a batch size. You can also nest loops, which is not always guaranteed in these types of DSLs. For some situations, you only get the index and not the item, so it's more like a C-style loop. Not the end of the world, but still not ideal.</p>\n<h2 id=\"modules\" tabindex=\"-1\">Modules <a class=\"direct-link\" href=\"#modules\">#</a></h2>\n<p>Modules are just Azure Deployment resources expressed in Bicep. Because of this, they introduce a new object for whatever DAG-based workflow engine executes ARM templates. This means that if you had a single module with a quick item which was depended on by another quick item and a slow item, and you extracted the quick item and the slow item into a module, the other quick item will now have to wait for the module to finish, which means waiting for the long item.</p>\n<p>Modules function basically exactly like the ARM Deployments they become. So modules don't export their contents. If you need to gain access to that information, you have to use outputs and fiddle with passing the correct information. You also can't just output the whole resource, so you'll either have to output all the parameters you need or reconstitute the resource with <code>existing</code>.</p>\n<p>I see this as a missed opportunity. I think they could have provided much more helpful modules. I think that having each module correspond to an ARM Deployment was a bad choice that severely limits their options. For example, they can't output an entire resource from the module.<br>\nAnd although Bicep claims to be declarative, that isn't leveraged. Every resource declaration might as well be the correstponding az-cli command for all you can do with it. It's not possible to modify the resources defined in a module from outside it. For example, a module might have hard-coded a value on the assumption that no-one would need to change it. But now someone <em>does</em> need to change it (&quot;This data isn't speed-critical, can you put in at <em>cold</em> tier?&quot;). So you can't just modify that for this one case, and you have to crack open the original template and add <em>another</em> paremeter that is used by only 1 group. Eventually your template starts to look like a helm chart, with more holes than not.<br>\nEven ignoring &quot;advanced&quot; use cases for modifying modules, adding role assignments to resources is a basic requirement and is a bit kludgy.</p>\n<h2 id=\"extensions-%3A-roles%2C-policies%2C-locks%2C-and-diagnostics\" tabindex=\"-1\">Extensions : Roles, Policies, Locks, and Diagnostics <a class=\"direct-link\" href=\"#extensions-%3A-roles%2C-policies%2C-locks%2C-and-diagnostics\">#</a></h2>\n<p>It honestly looks pretty alright attaching role assignments if you don't have to cross module boundaries. You can just reference the resource:</p>\n<pre class=\"language-bicep\"><code class=\"language-bicep\"><span class=\"highlight-line\"><span class=\"token keyword\">resource</span> lockResource <span class=\"token string\">'Microsoft.Authorization/locks@2016-09-01'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">scope</span><span class=\"token operator\">:</span> cosmosDBAccount</span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'DontDelete'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">level</span><span class=\"token operator\">:</span> <span class=\"token string\">'CanNotDelete'</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">notes</span><span class=\"token operator\">:</span> <span class=\"token string\">'Prevents deletion of the toy data Cosmos DB account.'</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span></code></pre>\n<p>If you do have to cross module boundaries, it gets kludgy.</p>\n<p>I also haven't found a way to get a reference in a parent module of resources named in the child module. That is, if a module names a resource and passes that as an output, I can't use that to construct the <code>existing</code> reference. It complains that it needs something resolvable at the start of the deployment time...</p>\n<h2 id=\"scopes\" tabindex=\"-1\">Scopes <a class=\"direct-link\" href=\"#scopes\">#</a></h2>\n<p>There are many scopes which are not &quot;the current resources group&quot;. Obviously, &quot;another resource group&quot;. But also new resource groups are subscription-level objects, and there are Management Groups and Tenancies too.</p>\n<p>In Bicep, you only specify the scope type that a file targets. The actual value must be passed in during its invocation. For example, to create a resource group and deploy a module to it, we can specify a file at the <code>'subscription'</code> target scope and then tell the module to deploy at the scope of the resource group we just created:</p>\n<pre class=\"language-bicep\"><code class=\"language-bicep\"><span class=\"highlight-line\"><span class=\"token keyword\">targetScope</span> <span class=\"token operator\">=</span> <span class=\"token string\">'subscription'</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">resource</span> resourceGroup <span class=\"token string\">'Microsoft.Resources/resourceGroups@2021-04-01'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'bicep-test'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">location</span><span class=\"token operator\">:</span> <span class=\"token string\">'canadacentral'</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">module</span> mod <span class=\"token string\">'05_module.bicep'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">scope</span><span class=\"token operator\">:</span> resourceGroup</span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'bicep-test-rg'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">cosmosDBAccountName</span><span class=\"token operator\">:</span> <span class=\"token string\">'bicep-test'</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>You can also use functions to materialise the scopes you need. For example, you can get the tenant scope with the <code>tenant()</code> function, and a resource group with <code>resourceGroup('name-of-rg')</code>.</p>\n<h2 id=\"doing-arbitrary-things-with-deployment-scripts\" tabindex=\"-1\">Doing arbitrary things with deployment scripts <a class=\"direct-link\" href=\"#doing-arbitrary-things-with-deployment-scripts\">#</a></h2>\n<p>Deployment scripts are scripts run in docker containers as part of an ARM deployment. They use a managed identity (user assigned) to run. You can have them do basically whatever.</p>\n<p>It's also fairly clean to do, you just have to create the MI and assign it permissions:</p>\n<pre class=\"language-bicep\"><code class=\"language-bicep\"><span class=\"highlight-line\"><span class=\"token comment\">// create managed identity</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">var</span> userAssignedIdentityName <span class=\"token operator\">=</span> <span class=\"token string\">'configDeployer'</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">resource</span> userAssignedIdentity <span class=\"token string\">'Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> userAssignedIdentityName</span>\n<span class=\"highlight-line\">  <span class=\"token property\">location</span><span class=\"token operator\">:</span> <span class=\"token function\">resourceGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>location</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token comment\">// assign roles</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">var</span> roleAssignmentName <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token function\">resourceGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token string\">'contributor'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">var</span> contributorRoleDefinitionId <span class=\"token operator\">=</span> <span class=\"token function\">resourceId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Microsoft.Authorization/roleDefinitions'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b24988ac-6180-42a0-ab88-20f7382dd24c'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">resource</span> roleAssignment <span class=\"token string\">'Microsoft.Authorization/roleAssignments@2020-04-01-preview'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> roleAssignmentName</span>\n<span class=\"highlight-line\">  <span class=\"token property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">roleDefinitionId</span><span class=\"token operator\">:</span> contributorRoleDefinitionId</span>\n<span class=\"highlight-line\">    <span class=\"token property\">principalId</span><span class=\"token operator\">:</span> userAssignedIdentity<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>principalId</span>\n<span class=\"highlight-line\">    <span class=\"token property\">principalType</span><span class=\"token operator\">:</span> <span class=\"token string\">'ServicePrincipal'</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>and then running it is a bit of stuff but not too much:</p>\n<pre class=\"language-bicep\"><code class=\"language-bicep\"><span class=\"highlight-line\"><span class=\"token keyword\">var</span> deploymentScriptName <span class=\"token operator\">=</span> <span class=\"token string\">'CopyConfigScript'</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">resource</span> deploymentScript <span class=\"token string\">'Microsoft.Resources/deploymentScripts@2020-10-01'</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">name</span><span class=\"token operator\">:</span> deploymentScriptName</span>\n<span class=\"highlight-line\">  <span class=\"token property\">location</span><span class=\"token operator\">:</span> <span class=\"token function\">resourceGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>location</span>\n<span class=\"highlight-line\">  <span class=\"token property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">'AzurePowerShell'</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">identity</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'UserAssigned'</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">userAssignedIdentities</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">      <span class=\"token interpolated-string\"><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">userAssignedIdentity<span class=\"token punctuation\">.</span>id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">dependsOn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span>\n<span class=\"highlight-line\">    roleAssignment</span>\n<span class=\"highlight-line\">    blobContainer</span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">  <span class=\"token property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">    <span class=\"token property\">azPowerShellVersion</span><span class=\"token operator\">:</span> <span class=\"token string\">'3.0'</span></span>\n    <span class=\"token property\">scriptContent</span><span class=\"token operator\">:</span> <span class=\"token string\">'''\n<span class=\"highlight-line\">      Invoke-RestMethod -Uri 'https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/mslearn-arm-deploymentscripts-sample/appsettings.json' -OutFile 'appsettings.json'</span>\n<span class=\"highlight-line\">      $storageAccount = Get-AzStorageAccount -ResourceGroupName 'learndeploymentscript_exercise_1' | Where-Object { $_.StorageAccountName -like 'storage*' }</span>\n<span class=\"highlight-line\">      $blob = Set-AzStorageBlobContent -File 'appsettings.json' -Container 'config' -Blob 'appsettings.json' -Context $storageAccount.Context</span>\n<span class=\"highlight-line\">      $DeploymentScriptOutputs = @{}</span>\n<span class=\"highlight-line\">      $DeploymentScriptOutputs['Uri'] = $blob.ICloudBlob.Uri</span>\n<span class=\"highlight-line\">      $DeploymentScriptOutputs['StorageUri'] = $blob.ICloudBlob.StorageUri</span>\n    '''</span>\n<span class=\"highlight-line\">    <span class=\"token property\">retentionInterval</span><span class=\"token operator\">:</span> <span class=\"token string\">'P1D'</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>This feature isn't specific to Bicep. It is personally a bit exciting, since it might solve some headaches at work. Bicep has the added convenience of letting you load the contents of a script from a local file when preparing the template. This lets you actually test the script.</p>\n<h2 id=\"summary\" tabindex=\"-1\">Summary <a class=\"direct-link\" href=\"#summary\">#</a></h2>\n<p>In the end, this is just a less painful way to write ARM templates. Bicep isn't a replacement for ARM templates so much as it's a replacement for JSON. It's obviously less painful than JSON for ARM templates, and obviously we'll be using it instead of JSON.</p>\n<p>I even think this might be better than az-cli commands, since it is about as verbose but comes with fun idempotency features. The problem becomes integrating it with other deployment tools, such as Ansible. The parameters file is pretty gross but does allow for specifying things as structured data, but so is templating a parent module with the parameters filled in. I'll probably look for a cooler solution, maybe an Ansible plugin.</p>\n<p>But it's no CDK, and still has <em>all</em> of the problems that ARM templates.</p>\n",
      "date_published": "2021-11-14T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/ansible_better_http_api/",
      "url": "https://lilatomic.ca/posts/ansible_better_http_api/",
      "title": "Faking a better HttpApi plugin",
      "content_html": "<h1 id=\"faking-a-better-httpapi-plugin\" tabindex=\"-1\">Faking a better HttpApi plugin <a class=\"direct-link\" href=\"#faking-a-better-httpapi-plugin\">#</a></h1>\n<p>The builtin HttpApi plugins are not great, as <a href=\"/posts/ansible_httpapi_plugins/\">I wrote about before</a>. This makes interacting with HTTP APIs kind of a pain. It also means that all the collections which make heavy use of HTTP APIs write their frameworks on top of the bad one to make it less bad. Instead of that, we're just going to bypass the connection plugin stack, and the Ansible Plugin situation entirely.</p>\n<p><a href=\"#final-version\">TLDR</a></p>\n<h2 id=\"development\" tabindex=\"-1\">Development <a class=\"direct-link\" href=\"#development\">#</a></h2>\n<h3 id=\"the-goal\" tabindex=\"-1\">The goal <a class=\"direct-link\" href=\"#the-goal\">#</a></h3>\n<p>Let's start by sketching out what we want the API to look like. Remember that this is a low-level action plugin. We'll be able to wrap this later to build more specific APIs. Here's an example for upserting a dashboard to Grafana:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"highlight-line\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> add grafana dashboard</span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">lilatomic.api.http</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">connection</span><span class=\"token punctuation\">:</span> grafana</span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> POST</span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/dashboards/db\"</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">body</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">dashboard</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"{{ lookup('file', dashboard_file) | from_json }}\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">message</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"redeploy\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">overwrite</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></span></code></pre>\n<h3 id=\"supplying-connection-information\" tabindex=\"-1\">Supplying connection information <a class=\"direct-link\" href=\"#supplying-connection-information\">#</a></h3>\n<p>You can just use normal variables for this, but I'm going to use the Inventory file. To my mind, most HTTP APIs are like nodes and actions targeting them are configuring them, so they're just another type of thing you can run Ansible tasks against. I therefore think it's natural to have them fit into the Inventory file.</p>\n<p>We'd like for them to <em>not</em> show up in the conventional hosts list (for example, when targeting <em>all</em>). Fortunately the <code>yaml</code> inventory plugin lets us add vars which get passed to all hosts. This is just about what we want. Note also that you can template these. I'm going to namespace the connections, so they don't conflict with other variables. So my inventory will be structured like this:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"highlight-line\"><span class=\"token key atrule\">all</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">vars</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">lilatomic_api_http</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">children</span><span class=\"token punctuation\">:</span></span></code></pre>\n<p>You could also write a <a href=\"/posts/ansible_writing_facts_plugin/\">Vars Plugin</a>. I didn't think it was necessary, and I wanted to keep these connections with the Hosts.</p>\n<h3 id=\"basic-requests\" tabindex=\"-1\">Basic requests <a class=\"direct-link\" href=\"#basic-requests\">#</a></h3>\n<p>We're going to start with a basic <a href=\"/posts/ansible_writing_action_plugin/\">Action Plugin</a>.</p>\n<p>The first thing we'll want to do is retrieve the connection information for the specified connection. That's easily done by just accessing the vars. The vars above actually are injected as hostvars common to all hosts, so accessing them is pretty easy. <code>task_vars[&quot;lilatomic_api_http&quot;][connection_name]</code></p>\n<p>This first pass at the plugin is already much nicer for making GET requests.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> urljoin</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> requests</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>action <span class=\"token keyword\">import</span> ActionBase</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">NS <span class=\"token operator\">=</span> <span class=\"token string\">\"lilatomic_api_http\"</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionInfo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> base</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ActionModule</span><span class=\"token punctuation\">(</span>ActionBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span>task_vars<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tconnection_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tconnection_info <span class=\"token operator\">=</span> ConnectionInfo<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>task_vars<span class=\"token punctuation\">[</span>NS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>connection_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>urljoin<span class=\"token punctuation\">(</span>connection_info<span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>We can then use this with a playbook with a task like:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"highlight-line\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> get alerts</span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">lilatomic.api.http</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">connection</span><span class=\"token punctuation\">:</span> grafana</span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /alerts</span></code></pre>\n<h3 id=\"more-methods\" tabindex=\"-1\">More methods <a class=\"direct-link\" href=\"#more-methods\">#</a></h3>\n<p>One way of supporting more methods would be to make a plugin for each method type. I intend to do this, for convenience. But it would also be convenient to reduce duplication with a single low-level module. This would also more easily allow parametrising the method (which could be useful for things where using PUT vs PATCH is something known at runtime only). Implementing this is as simple as using the requests library, which is pretty nice.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> urljoin</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> requests</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>action <span class=\"token keyword\">import</span> ActionBase</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">NS <span class=\"token operator\">=</span> <span class=\"token string\">\"lilatomic_api_http\"</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionInfo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> base</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ActionModule</span><span class=\"token punctuation\">(</span>ActionBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span>task_vars<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tconnection_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tconnection_info <span class=\"token operator\">=</span> ConnectionInfo<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>task_vars<span class=\"token punctuation\">[</span>NS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>connection_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tmethod <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tdata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tjson <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> urljoin<span class=\"token punctuation\">(</span>connection_info<span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\tdata<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>json<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg_or</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> default<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<h3 id=\"more-parameters\" tabindex=\"-1\">More parameters <a class=\"direct-link\" href=\"#more-parameters\">#</a></h3>\n<p>HTTP APIs are full of other things that you need to specify, like proxy settings or headers or cookies or mTLS or all that. We could set all of those up as different parameters, but at some point we're just repeating the <code>requests</code> API. So instead, we'll offer an access hatch: a dedicated way of passing advanced parameters to the actual call to requests. I've simply labelled these fields as <code>kwargs</code>, which will hopefully indicate that these args are unvalidated. We also add a way of recursively merging the kwargs, which allows us to specify headers for all requests made with the connection and just for specific tasks and have them merged; as an example.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> urljoin</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> requests</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>action <span class=\"token keyword\">import</span> ActionBase</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">NS <span class=\"token operator\">=</span> <span class=\"token string\">\"lilatomic_api_http\"</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionInfo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> base</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>kwargs <span class=\"token operator\">=</span> kwargs <span class=\"token keyword\">or</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ActionModule</span><span class=\"token punctuation\">(</span>ActionBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span>task_vars<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tconnection_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tconnection_info <span class=\"token operator\">=</span> ConnectionInfo<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>task_vars<span class=\"token punctuation\">[</span>NS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>connection_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\ttask_kwargs <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"kwargs\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tmethod <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tdata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tjson <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\trequest_kwargs <span class=\"token operator\">=</span> recursive_merge<span class=\"token punctuation\">(</span>connection_info<span class=\"token punctuation\">.</span>kwargs<span class=\"token punctuation\">,</span> task_kwargs<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> urljoin<span class=\"token punctuation\">(</span>connection_info<span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\tdata<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>json<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>request_kwargs<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg_or</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> default<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">recursive_merge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span></span>\n\t<span class=\"token triple-quoted-string string\">\"\"\" Recursively merges dictionaries\n<span class=\"highlight-line\">\tMostly taken from user `andrew cooke` on [stackoverflow](https://stackoverflow.com/a/7205107)</span>\n\t\"\"\"</span>\n<span class=\"highlight-line\">\tpath <span class=\"token operator\">=</span> path <span class=\"token keyword\">or</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\tout <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> k <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> recursive_merge<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> out</span>\n<span class=\"highlight-line\"></span></code></pre>\n<h3 id=\"simple-auths\" tabindex=\"-1\">Simple Auths <a class=\"direct-link\" href=\"#simple-auths\">#</a></h3>\n<p>Let's add some basic auths. One goal for the auths is that it should be possible to pass around the whole block as a unit. This allows us to easily use different endpoints which share the same underlying authentication system. We want to be able to support a variety of auths. I'm going to use a tagged union, with the <code>method</code> field as the tag. We leverage <code>requests</code> for the Basic auth, and write out own class for Bearer. This class has a few customisation points for APIs which are special and want you to put <code>api_key</code> or <code>GenieKey</code> or something...</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict<span class=\"token punctuation\">,</span> Optional</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> urljoin</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> requests</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>action <span class=\"token keyword\">import</span> ActionBase</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> HTTPBasicAuth<span class=\"token punctuation\">,</span> AuthBase</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">NS <span class=\"token operator\">=</span> <span class=\"token string\">\"lilatomic_api_http\"</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HTTPBearerAuth</span><span class=\"token punctuation\">(</span>AuthBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> header<span class=\"token operator\">=</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> value_format<span class=\"token operator\">=</span><span class=\"token string\">\"Bearer {}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> token</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>header <span class=\"token operator\">=</span> header</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>value_format <span class=\"token operator\">=</span> value_format</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tr<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>value_format<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> r</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionInfo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">,</span> auth<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> base</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>auth <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>make_auth<span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>kwargs <span class=\"token operator\">=</span> kwargs <span class=\"token keyword\">or</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@staticmethod</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">make_auth</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>AuthBase<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> params <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> params <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\">\t\tauth_method <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> auth_method <span class=\"token operator\">==</span> <span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> HTTPBasicAuth<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">elif</span> auth_method <span class=\"token operator\">==</span> <span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> HTTPBearerAuth<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>params<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ActionModule</span><span class=\"token punctuation\">(</span>ActionBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span>task_vars<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tconnection_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tconnection_info <span class=\"token operator\">=</span> ConnectionInfo<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>task_vars<span class=\"token punctuation\">[</span>NS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>connection_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\ttask_kwargs <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"kwargs\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tmethod <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tdata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tjson <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\trequest_kwargs <span class=\"token operator\">=</span> recursive_merge<span class=\"token punctuation\">(</span>connection_info<span class=\"token punctuation\">.</span>kwargs<span class=\"token punctuation\">,</span> task_kwargs<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> urljoin<span class=\"token punctuation\">(</span>connection_info<span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\tauth<span class=\"token operator\">=</span>connection_info<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>json<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>request_kwargs<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"h\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg_or</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> default<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">recursive_merge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span></span>\n\t<span class=\"token triple-quoted-string string\">\"\"\" Recursively merges dictionaries\n<span class=\"highlight-line\">\tMostly taken from user `andrew cooke` on [stackoverflow](https://stackoverflow.com/a/7205107)</span>\n\t\"\"\"</span>\n<span class=\"highlight-line\">\tpath <span class=\"token operator\">=</span> path <span class=\"token keyword\">or</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\tout <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> k <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> recursive_merge<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> out</span>\n<span class=\"highlight-line\"></span></code></pre>\n<h3 id=\"better-returns\" tabindex=\"-1\">Better returns <a class=\"direct-link\" href=\"#better-returns\">#</a></h3>\n<p>Currently we always return the JSON, even if it's not there. This is multiple problems:</p>\n<ol>\n<li>we can't load anything which doesn't return JSON</li>\n<li>we never see any errors</li>\n<li>we never get any other information</li>\n</ol>\n<p>So lets solve those. We can first just <em>not</em> return JSON if it's not supposed to be there:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\">out <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tout<span class=\"token punctuation\">[</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></code></pre>\n<p>Neat. For errors, we can leverage the <code>response.ok</code> property. We'd also like to support the permissible return codes, since sometimes a 409 Conflict just means things are OK. Ansible modules signal failure with the &quot;failure&quot; key in the return: <code>out[&quot;failed&quot;] = not self.is_ok(r, self.arg_or(&quot;status_code&quot;))</code>. The body of that helper method is pretty simple:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@staticmethod</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_ok</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">:</span> Response<span class=\"token punctuation\">,</span> acceptable_codes<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">if</span> acceptable_codes<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token keyword\">in</span> acceptable_codes</span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>ok</span></code></pre>\n<p>And last we've got to build up the rest of the response. That's pretty easy, it's just transforming things. I've tried to generate all the fields that the <code>ansible.builtin.uri</code> module does.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict<span class=\"token punctuation\">,</span> Optional<span class=\"token punctuation\">,</span> List</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> urljoin</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> requests</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>action <span class=\"token keyword\">import</span> ActionBase</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> Response</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> HTTPBasicAuth<span class=\"token punctuation\">,</span> AuthBase</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">NS <span class=\"token operator\">=</span> <span class=\"token string\">\"lilatomic_api_http\"</span></span>\n<span class=\"highlight-line\">AUTHORIZATION_HEADER <span class=\"token operator\">=</span> <span class=\"token string\">\"Authorization\"</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HTTPBearerAuth</span><span class=\"token punctuation\">(</span>AuthBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> header<span class=\"token operator\">=</span>AUTHORIZATION_HEADER<span class=\"token punctuation\">,</span> value_format<span class=\"token operator\">=</span><span class=\"token string\">\"Bearer {}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> token</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>header <span class=\"token operator\">=</span> header</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>value_format <span class=\"token operator\">=</span> value_format</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tr<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>value_format<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> r</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionInfo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">,</span> auth<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> base</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>auth <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>make_auth<span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>kwargs <span class=\"token operator\">=</span> kwargs <span class=\"token keyword\">or</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@staticmethod</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">make_auth</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>AuthBase<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> params <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> params <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\">\t\tauth_method <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> auth_method <span class=\"token operator\">==</span> <span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> HTTPBasicAuth<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">elif</span> auth_method <span class=\"token operator\">==</span> <span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> HTTPBearerAuth<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>params<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ActionModule</span><span class=\"token punctuation\">(</span>ActionBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span>task_vars<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tconnection_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tconnection_info <span class=\"token operator\">=</span> ConnectionInfo<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>task_vars<span class=\"token punctuation\">[</span>NS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>connection_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\ttask_kwargs <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"kwargs\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tmethod <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tdata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tjson <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\trequest_kwargs <span class=\"token operator\">=</span> recursive_merge<span class=\"token punctuation\">(</span>connection_info<span class=\"token punctuation\">.</span>kwargs<span class=\"token punctuation\">,</span> task_kwargs<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> urljoin<span class=\"token punctuation\">(</span>connection_info<span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\tauth<span class=\"token operator\">=</span>connection_info<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>json<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>request_kwargs<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tout <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># response status</span></span>\n<span class=\"highlight-line\">\t\tout<span class=\"token punctuation\">[</span><span class=\"token string\">\"failed\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>is_ok<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"status_code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># response data</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tout<span class=\"token punctuation\">[</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tout<span class=\"token punctuation\">[</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>text</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># parameters for ansible.legacy.uri module</span></span>\n<span class=\"highlight-line\">\t\tout<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"content\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"content_length\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Length\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"content_type\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"cookies\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"date\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"elapsed\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>elapsed<span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"redirected\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>is_redirect<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"server\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Server\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># other parameters</span></span>\n<span class=\"highlight-line\">\t\tout<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"encoding\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"headers\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"reason\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"status_code\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># request parameters, for debugging</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"log_request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\treq <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>request</span>\n<span class=\"highlight-line\">\t\t\theaders <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"log_auth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">if</span> AUTHORIZATION_HEADER <span class=\"token keyword\">in</span> headers<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\theaders<span class=\"token punctuation\">[</span>AUTHORIZATION_HEADER<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"*\"</span><span class=\"token operator\">*</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">[</span>AUTHORIZATION_HEADER<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\tout<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token string\">\"request\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"body\"</span><span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"headers\"</span><span class=\"token punctuation\">:</span> headers<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"method\"</span><span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"path_url\"</span><span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>path_url<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> out</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@staticmethod</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">is_ok</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">:</span> Response<span class=\"token punctuation\">,</span> acceptable_codes<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> acceptable_codes<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token keyword\">in</span> acceptable_codes</span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>ok</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg_or</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> default<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">recursive_merge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span></span>\n\t<span class=\"token triple-quoted-string string\">\"\"\" Recursively merges dictionaries\n<span class=\"highlight-line\">\tMostly taken from user `andrew cooke` on [stackoverflow](https://stackoverflow.com/a/7205107)</span>\n\t\"\"\"</span>\n<span class=\"highlight-line\">\tpath <span class=\"token operator\">=</span> path <span class=\"token keyword\">or</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\tout <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> k <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> recursive_merge<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> out</span>\n<span class=\"highlight-line\"></span></code></pre>\n<h3 id=\"friendlier-api\" tabindex=\"-1\">Friendlier API <a class=\"direct-link\" href=\"#friendlier-api\">#</a></h3>\n<p>The current API requires people to add Headers in the kwargs, which sucks a bit. Adding another parameter is easy enough.</p>\n<p>While we're at it, it's pretty easy to make shortcuts for specific methods:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> ActionModule <span class=\"token keyword\">as</span> Http</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ActionModule</span><span class=\"token punctuation\">(</span>Http<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"POST\"</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span>task_vars<span class=\"token punctuation\">)</span></span></code></pre>\n<h3 id=\"documentation\" tabindex=\"-1\">Documentation <a class=\"direct-link\" href=\"#documentation\">#</a></h3>\n<p>Didn't think I'd let us off the hook for this, did you? It's easy if tedious, you just have to create a fake module and fill in the required docstrings. I've only done that for the main HTTP plugin. Ideally, I would pull out everything except for the &quot;method&quot; parameter into a document fragment, and then have them all reference that. something for a future improvement</p>\n<h2 id=\"final-version\" tabindex=\"-1\">Final Version <a class=\"direct-link\" href=\"#final-version\">#</a></h2>\n<p>With a few improvements along the way, we have:</p>\n<p>.../plugins/action/http.py</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict<span class=\"token punctuation\">,</span> Optional<span class=\"token punctuation\">,</span> List</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> urljoin</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> requests</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>action <span class=\"token keyword\">import</span> ActionBase</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> Response</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> HTTPBasicAuth<span class=\"token punctuation\">,</span> AuthBase</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">NS <span class=\"token operator\">=</span> <span class=\"token string\">\"lilatomic_api_http\"</span></span>\n<span class=\"highlight-line\">AUTHORIZATION_HEADER <span class=\"token operator\">=</span> <span class=\"token string\">\"Authorization\"</span></span>\n<span class=\"highlight-line\">DEFAULT_TIMEOUT <span class=\"token operator\">=</span> <span class=\"token number\">15</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HTTPBearerAuth</span><span class=\"token punctuation\">(</span>AuthBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> header<span class=\"token operator\">=</span>AUTHORIZATION_HEADER<span class=\"token punctuation\">,</span> value_format<span class=\"token operator\">=</span><span class=\"token string\">\"Bearer {}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> token</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>header <span class=\"token operator\">=</span> header</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>value_format <span class=\"token operator\">=</span> value_format</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tr<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>value_format<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> r</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionInfo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">,</span> auth<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>base <span class=\"token operator\">=</span> base</span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>auth <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>make_auth<span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">.</span>kwargs <span class=\"token operator\">=</span> kwargs <span class=\"token keyword\">or</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@staticmethod</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">make_auth</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span>AuthBase<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> params <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> params <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\">\t\tauth_method <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> auth_method <span class=\"token operator\">==</span> <span class=\"token string\">\"basic\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> HTTPBasicAuth<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">elif</span> auth_method <span class=\"token operator\">==</span> <span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> HTTPBearerAuth<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>params<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ActionModule</span><span class=\"token punctuation\">(</span>ActionBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span>task_vars<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tconnection_name <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tconnection_info <span class=\"token operator\">=</span> ConnectionInfo<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>task_vars<span class=\"token punctuation\">[</span>NS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>connection_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\ttask_kwargs <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"kwargs\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tmethod <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tdata <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tjson <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\theaders <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"headers\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\trequest_kwargs <span class=\"token operator\">=</span> recursive_merge<span class=\"token punctuation\">(</span>recursive_merge<span class=\"token punctuation\">(</span>connection_info<span class=\"token punctuation\">.</span>kwargs<span class=\"token punctuation\">,</span> task_kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"headers\"</span><span class=\"token punctuation\">:</span> headers<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\trequest_kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">,</span> request_kwargs<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">,</span> DEFAULT_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tr <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> urljoin<span class=\"token punctuation\">(</span>connection_info<span class=\"token punctuation\">.</span>base <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>arg<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\tauth<span class=\"token operator\">=</span>connection_info<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>json<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>request_kwargs<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tout <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># response status</span></span>\n<span class=\"highlight-line\">\t\tout<span class=\"token punctuation\">[</span><span class=\"token string\">\"failed\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>is_ok<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"status_code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># response data</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tout<span class=\"token punctuation\">[</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tout<span class=\"token punctuation\">[</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>text</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># parameters for ansible.legacy.uri module</span></span>\n<span class=\"highlight-line\">\t\tout<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"content\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"content_length\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Length\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"content_type\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"cookies\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"date\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"elapsed\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>elapsed<span class=\"token punctuation\">.</span>seconds<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"redirected\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>is_redirect<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"server\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"Server\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># other parameters</span></span>\n<span class=\"highlight-line\">\t\tout<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"encoding\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"headers\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"reason\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"status_code\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># request parameters, for debugging</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"log_request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\treq <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>request</span>\n<span class=\"highlight-line\">\t\t\theaders <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>arg_or<span class=\"token punctuation\">(</span><span class=\"token string\">\"log_auth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">if</span> AUTHORIZATION_HEADER <span class=\"token keyword\">in</span> headers<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\theaders<span class=\"token punctuation\">[</span>AUTHORIZATION_HEADER<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">[</span>AUTHORIZATION_HEADER<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\tout<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token string\">\"request\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"body\"</span><span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"headers\"</span><span class=\"token punctuation\">:</span> headers<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"method\"</span><span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"path_url\"</span><span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>path_url<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> out</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@staticmethod</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">is_ok</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">:</span> Response<span class=\"token punctuation\">,</span> acceptable_codes<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> acceptable_codes<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token keyword\">in</span> acceptable_codes</span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>ok</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@staticmethod</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">parse_content_length</span><span class=\"token punctuation\">(</span>content_length<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> content_length<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>content_length<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span>arg<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">arg_or</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_task<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> default<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">recursive_merge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Dict<span class=\"token punctuation\">:</span></span>\n\t<span class=\"token triple-quoted-string string\">\"\"\" Recursively merges dictionaries\n<span class=\"highlight-line\">\tMostly taken from user `andrew cooke` on [stackoverflow](https://stackoverflow.com/a/7205107)</span>\n\t\"\"\"</span>\n<span class=\"highlight-line\">\tpath <span class=\"token operator\">=</span> path <span class=\"token keyword\">or</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\tout <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> k <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> recursive_merge<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tout<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> out</span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>.../plugins/modules/http.py</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token comment\">#!/usr/bin/python</span></span>\n<span class=\"highlight-line\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\nDOCUMENTATION <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n<span class=\"highlight-line\">---</span>\n<span class=\"highlight-line\">module: lilatomic.api.http</span>\n<span class=\"highlight-line\">short_description: A nice and friendly HTTP API</span>\n<span class=\"highlight-line\">description:</span>\n<span class=\"highlight-line\">  - An easy way to use the [requests](https://docs.python-requests.org/en/master/) library to make HTTP requests</span>\n<span class=\"highlight-line\">  - Define connections and re-use them across tasks</span>\n<span class=\"highlight-line\">version_added: \"0.1.0\"</span>\n<span class=\"highlight-line\">options:</span>\n<span class=\"highlight-line\">  connection:</span>\n<span class=\"highlight-line\">    description: the name of the connection to use</span>\n<span class=\"highlight-line\">    required: true</span>\n<span class=\"highlight-line\">    type: string</span>\n<span class=\"highlight-line\">  method:</span>\n<span class=\"highlight-line\">    description: the HTTP method to use</span>\n<span class=\"highlight-line\">    required: true</span>\n<span class=\"highlight-line\">    default: GET</span>\n<span class=\"highlight-line\">    type: string</span>\n<span class=\"highlight-line\">  path:</span>\n<span class=\"highlight-line\">    description: the slug to join to the connection's base</span>\n<span class=\"highlight-line\">  data:</span>\n<span class=\"highlight-line\">    description: object to send in the body of the request.</span>\n<span class=\"highlight-line\">    required: false</span>\n<span class=\"highlight-line\">    type: string or dict</span>\n<span class=\"highlight-line\">  json:</span>\n<span class=\"highlight-line\">    description: json data to send in the body of the request.</span>\n<span class=\"highlight-line\">    required: false</span>\n<span class=\"highlight-line\">    type: string or dict</span>\n<span class=\"highlight-line\">  headers:</span>\n<span class=\"highlight-line\">    description: HTTP headers for the request</span>\n<span class=\"highlight-line\">    required: false</span>\n<span class=\"highlight-line\">    type: dict</span>\n<span class=\"highlight-line\">    default: dict()</span>\n<span class=\"highlight-line\">  status_code:</span>\n<span class=\"highlight-line\">    description: acceptable status codes</span>\n<span class=\"highlight-line\">    required: false</span>\n<span class=\"highlight-line\">    default: requests default, status_code &lt; 400</span>\n<span class=\"highlight-line\">    type: list</span>\n<span class=\"highlight-line\">    elements: int</span>\n<span class=\"highlight-line\">  timeout:</span>\n<span class=\"highlight-line\">    description: timeout in seconds of the request</span>\n<span class=\"highlight-line\">    required: false</span>\n<span class=\"highlight-line\">    default: 15</span>\n<span class=\"highlight-line\">    type: float</span>\n<span class=\"highlight-line\">  log_request:</span>\n<span class=\"highlight-line\">    description: returns information about the request. Useful for debugging. Censors Authorization header unless log_auth is used.</span>\n<span class=\"highlight-line\">    required: false</span>\n<span class=\"highlight-line\">    default: false</span>\n<span class=\"highlight-line\">    type: bool</span>\n<span class=\"highlight-line\">  log_auth:</span>\n<span class=\"highlight-line\">    description: uncensors the Authorization header.</span>\n<span class=\"highlight-line\">    required: false</span>\n<span class=\"highlight-line\">    default: false</span>\n<span class=\"highlight-line\">    type: bool</span>\n<span class=\"highlight-line\">  kwargs:</span>\n<span class=\"highlight-line\">    description: Access hatch for passing kwargs to the requests.request method. Recursively merged with and overrides kwargs set on the connection.</span>\n<span class=\"highlight-line\">    required: false</span>\n<span class=\"highlight-line\">    default: None</span>\n<span class=\"highlight-line\">    type: dict</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\nEXAMPLES <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n<span class=\"highlight-line\">---</span>\n<span class=\"highlight-line\">- name: post</span>\n<span class=\"highlight-line\">  lilatomic.api.http:</span>\n<span class=\"highlight-line\">    connection: httpbin</span>\n<span class=\"highlight-line\">    method: POST</span>\n<span class=\"highlight-line\">    path: /post</span>\n<span class=\"highlight-line\">    data:</span>\n<span class=\"highlight-line\">      1: 1</span>\n<span class=\"highlight-line\">      2: 2</span>\n<span class=\"highlight-line\">  vars:</span>\n<span class=\"highlight-line\">    lilatomic_api_http:</span>\n<span class=\"highlight-line\">      httpbin:</span>\n<span class=\"highlight-line\">        base: \"https://httpbingo.org/\"</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">- name: GET with logging of the request</span>\n<span class=\"highlight-line\">  lilatomic.api.http:</span>\n<span class=\"highlight-line\">    connection: fishbike</span>\n<span class=\"highlight-line\">    path: /</span>\n<span class=\"highlight-line\">    log_request: true</span>\n<span class=\"highlight-line\">  vars:</span>\n<span class=\"highlight-line\">    lilatomic_api_http:</span>\n<span class=\"highlight-line\">      httpbin:</span>\n<span class=\"highlight-line\">        base: \"https://httpbingo.org/\"</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">- name: GET with Bearer auth</span>\n<span class=\"highlight-line\">  lilatomic.api.http:</span>\n<span class=\"highlight-line\">    connection: httpbin_bearer</span>\n<span class=\"highlight-line\">    path: /bearer</span>\n<span class=\"highlight-line\">    log_request: true</span>\n<span class=\"highlight-line\">    log_auth: true</span>\n<span class=\"highlight-line\">  vars:</span>\n<span class=\"highlight-line\">    lilatomic_api_http:</span>\n<span class=\"highlight-line\">      httpbin_bearer:</span>\n<span class=\"highlight-line\">        base: \"https://httpbin.org\"</span>\n<span class=\"highlight-line\">        auth:</span>\n<span class=\"highlight-line\">          method: bearer</span>\n<span class=\"highlight-line\">          token: hihello</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">- name: Use Kwargs for disallowing redirects</span>\n<span class=\"highlight-line\">  lilatomic.api.http:</span>\n<span class=\"highlight-line\">    connection: httpbin</span>\n<span class=\"highlight-line\">    path: redirect-to?url=get</span>\n<span class=\"highlight-line\">    kwargs:</span>\n<span class=\"highlight-line\">      allow_redirects: false</span>\n<span class=\"highlight-line\">    status_code: [ 302 ]</span>\n<span class=\"highlight-line\">  vars:</span>\n<span class=\"highlight-line\">    lilatomic_api_http:</span>\n<span class=\"highlight-line\">      httpbin:</span>\n<span class=\"highlight-line\">        base: \"https://httpbingo.org/\"</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\nRETURN <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n<span class=\"highlight-line\">---</span>\n<span class=\"highlight-line\">json:</span>\n<span class=\"highlight-line\">  description: json body</span>\n<span class=\"highlight-line\">  returned: response has headers Content-Type == \"application/json\"</span>\n<span class=\"highlight-line\">  type: complex</span>\n<span class=\"highlight-line\">  sample: {</span>\n<span class=\"highlight-line\">    \"authenticated\": true,</span>\n<span class=\"highlight-line\">    \"token\": \"hihello\"</span>\n<span class=\"highlight-line\">  }</span>\n<span class=\"highlight-line\">content:</span>\n<span class=\"highlight-line\">  description: response.content</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: str</span>\n<span class=\"highlight-line\">  sample: |</span>\n<span class=\"highlight-line\">    {\\\\n  \"authenticated\": true, \\\\n  \"token\": \"hihello\"\\\\n}\\\\n</span>\n<span class=\"highlight-line\">msg:</span>\n<span class=\"highlight-line\">  description: response body</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: str</span>\n<span class=\"highlight-line\">  sample: |</span>\n<span class=\"highlight-line\">    {\\\\n  \"authenticated\": true, \\\\n  \"token\": \"hihello\"\\\\n}\\\\n</span>\n<span class=\"highlight-line\">content-length:</span>\n<span class=\"highlight-line\">  description: response Content-Length header</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: int</span>\n<span class=\"highlight-line\">  sample: 51</span>\n<span class=\"highlight-line\">content-type:</span>\n<span class=\"highlight-line\">  description: response Content-Type header</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: string</span>\n<span class=\"highlight-line\">  sample: \"application/json\"</span>\n<span class=\"highlight-line\">cookies:</span>\n<span class=\"highlight-line\">  description: the cookies from the response</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: dict</span>\n<span class=\"highlight-line\">  sample: { }</span>\n<span class=\"highlight-line\">date:</span>\n<span class=\"highlight-line\">  description: response Date header</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: str</span>\n<span class=\"highlight-line\">  sample: \"Sat, 10 Jul 2021 23:14:14 GMT\"</span>\n<span class=\"highlight-line\">elapsed:</span>\n<span class=\"highlight-line\">  description: seconds elapsed making the request</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: int</span>\n<span class=\"highlight-line\">  sample: 0</span>\n<span class=\"highlight-line\">redirected:</span>\n<span class=\"highlight-line\">  description: if response was redirected</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: bool</span>\n<span class=\"highlight-line\">  sample: false</span>\n<span class=\"highlight-line\">server:</span>\n<span class=\"highlight-line\">  description: response Server header</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: str</span>\n<span class=\"highlight-line\">  sample: \"gunicorn/19.9.0\"</span>\n<span class=\"highlight-line\">status:</span>\n<span class=\"highlight-line\">  description: response status code; alias for status_code</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: str</span>\n<span class=\"highlight-line\">  sample: 200</span>\n<span class=\"highlight-line\">url:</span>\n<span class=\"highlight-line\">  description: the URL from the response</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: str</span>\n<span class=\"highlight-line\">  sample: \"https://httpbin.org/bearer\"</span>\n<span class=\"highlight-line\">encoding:</span>\n<span class=\"highlight-line\">  description: response encoding</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: str</span>\n<span class=\"highlight-line\">  sample: \"utf-8\"</span>\n<span class=\"highlight-line\">headers:</span>\n<span class=\"highlight-line\">  description: response headers</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: dict</span>\n<span class=\"highlight-line\">  elements: str</span>\n<span class=\"highlight-line\">  sample: {</span>\n<span class=\"highlight-line\">    \"Access-Control-Allow-Credentials\": \"true\",</span>\n<span class=\"highlight-line\">    \"Access-Control-Allow-Origin\": \"*\",</span>\n<span class=\"highlight-line\">    \"Connection\": \"keep-alive\",</span>\n<span class=\"highlight-line\">    \"Content-Length\": \"51\",</span>\n<span class=\"highlight-line\">    \"Content-Type\": \"application/json\",</span>\n<span class=\"highlight-line\">    \"Date\": \"Sat, 10 Jul 2021 23:14:14 GMT\",</span>\n<span class=\"highlight-line\">    \"Server\": \"gunicorn/19.9.0\"</span>\n<span class=\"highlight-line\">  }</span>\n<span class=\"highlight-line\">reason:</span>\n<span class=\"highlight-line\">  description: response status reason</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: str</span>\n<span class=\"highlight-line\">  sample: \"OK\"</span>\n<span class=\"highlight-line\">status_code:</span>\n<span class=\"highlight-line\">  description: response status code</span>\n<span class=\"highlight-line\">  returned: always</span>\n<span class=\"highlight-line\">  type: str</span>\n<span class=\"highlight-line\">  sample: 200</span>\n<span class=\"highlight-line\">request:</span>\n<span class=\"highlight-line\">  description: the original request, useful for debugging</span>\n<span class=\"highlight-line\">  returned: when log_request == true</span>\n<span class=\"highlight-line\">  type: complex</span>\n<span class=\"highlight-line\">  contains:</span>\n<span class=\"highlight-line\">    body:</span>\n<span class=\"highlight-line\">      description: request body</span>\n<span class=\"highlight-line\">      returned: always</span>\n<span class=\"highlight-line\">      type: str</span>\n<span class=\"highlight-line\">    headers:</span>\n<span class=\"highlight-line\">      description: request headers. Authorization will be censored unless `log_auth` == true</span>\n<span class=\"highlight-line\">      returned: always</span>\n<span class=\"highlight-line\">      type: dict</span>\n<span class=\"highlight-line\">      elements: str</span>\n<span class=\"highlight-line\">    method:</span>\n<span class=\"highlight-line\">      description: request HTTP method</span>\n<span class=\"highlight-line\">      returned: always</span>\n<span class=\"highlight-line\">      type: str</span>\n<span class=\"highlight-line\">    path_url:</span>\n<span class=\"highlight-line\">      description: request path url; the part of the url which is called the path; that's its technical name</span>\n<span class=\"highlight-line\">      returned: always</span>\n<span class=\"highlight-line\">      type: str</span>\n<span class=\"highlight-line\">    url:</span>\n<span class=\"highlight-line\">      description: the full url</span>\n<span class=\"highlight-line\">      returned: always</span>\n<span class=\"highlight-line\">      type: str</span>\n<span class=\"highlight-line\">  sample: {</span>\n<span class=\"highlight-line\">    \"body\": null,</span>\n<span class=\"highlight-line\">    \"headers\": {</span>\n<span class=\"highlight-line\">      \"Accept\": \"*/*\",</span>\n<span class=\"highlight-line\">      \"Accept-Encoding\": \"gzip, deflate\",</span>\n<span class=\"highlight-line\">      \"Authorization\": \"Bearer hihello\",</span>\n<span class=\"highlight-line\">      \"Connection\": \"keep-alive\",</span>\n<span class=\"highlight-line\">      \"User-Agent\": \"python-requests/2.25.1\"</span>\n<span class=\"highlight-line\">    },</span>\n<span class=\"highlight-line\">    \"method\": \"GET\",</span>\n<span class=\"highlight-line\">    \"path_url\": \"/bearer\",</span>\n<span class=\"highlight-line\">    \"url\": \"https://httpbin.org/bearer\"</span>\n<span class=\"highlight-line\">  }</span>\n\"\"\"</span></code></pre>\n",
      "date_published": "2021-07-30T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/ansible_httpapi_plugins/",
      "url": "https://lilatomic.ca/posts/ansible_httpapi_plugins/",
      "title": "Understanding Ansible HttpApi plugins",
      "content_html": "<h1 id=\"understanding-ansible-httpapi-plugins\" tabindex=\"-1\">Understanding Ansible HttpApi plugins <a class=\"direct-link\" href=\"#understanding-ansible-httpapi-plugins\">#</a></h1>\n<blockquote>\n<p>TL;DR: I wouldn't recommend this method. It's not actually that good.</p>\n</blockquote>\n<p>It's common to need to interact with HTTP APIs in an Ansible playbook. The standard method involves using the <code>uri</code> module or a <code>command</code> with <code>curl</code>. These can be clunky, especially when common connection parameters have to be copypasted between tasks. These also mix the concerns of the connection from those of the actual request. For example, the cert for mTLS has nothing to do with the body being submitted to the API.</p>\n<p>Looking through the list of plugin types in Ansible, there's something called an <code>httpapi</code> plugin. <a href=\"https://docs.ansible.com/ansible/latest/plugins/httpapi.html\">The documentation</a> is a bit light, but it's described as:</p>\n<blockquote>\n<p>HttpApi plugins tell Ansible how to interact with a remote device’s HTTP-based API and execute tasks on the device.</p>\n</blockquote>\n<p>This isn't <em>exactly</em> what we're after. It's really set up for devices like network switches where SSH isn't really the intended connection method.</p>\n<h2 id=\"adapting-the-httpapi-plugin\" tabindex=\"-1\">Adapting the HttpApi plugin <a class=\"direct-link\" href=\"#adapting-the-httpapi-plugin\">#</a></h2>\n<p>But being able to submit HTTP requests is about 100% of what we need, so we might be able to just use it with a little adapting. There are several steps involved in creating an HttpApi plugin:</p>\n<ol>\n<li>Create HttpApi plugin</li>\n<li>Create Module for invoking the plugin</li>\n</ol>\n<p>And for using it, it's fairly simple:</p>\n<ol>\n<li>Supply connection information</li>\n<li>Delegate tasks to that connection</li>\n</ol>\n<h2 id=\"understanding-the-httpapi-connection-structure%3A\" tabindex=\"-1\">Understanding the HttpApi connection structure: <a class=\"direct-link\" href=\"#understanding-the-httpapi-connection-structure%3A\">#</a></h2>\n<p>The flow for how HttpApi plugins work is a bit involved with a few unexpected outcomes. The flow is as follows:</p>\n<ol>\n<li>an Ansible task requests the <code>httpapi</code> connection type, possibly with the <code>ansible_connection</code> parameter</li>\n<li>the connection type has parameters which specify the <code>ansible_network_os</code>. This is used to look up which <code>httpapi</code> plugin to use</li>\n<li>if the connection has not already been established, ansible uses the <code>ansible-connection</code> command to create it in a separate process. Getting messages back from the connection is weird, as they are only flushed at the <em>start</em> of every task, after the connection has been established. Using <code>queue_message</code> during a module will cause those messages to be displayed at the start of the <em>next</em> module invocation which uses that connection.</li>\n<li>A Module will be invoked and can instantiate its connection to the httpapi plugin. This is basically just a wrapper around the socket path to the connection created above.</li>\n<li>The connection will allow the Module to send requests through the httpapi plugin</li>\n<li>The httpapi plugin send the requests through to <em>its</em> connection, which is the <code>ansible.netcommon.httpapi</code> connection plugin. This connection plugin has a method for enriching an HTTP request</li>\n<li>the connection plugin shells out to the util <code>ansible.module_utils.urls.open_url</code>, which is a generic way of making web requests, and eventually shells out to <code>urllib.request.urlopen</code></li>\n</ol>\n<h2 id=\"implementing-the-httpapi-stack\" tabindex=\"-1\">Implementing the HttpApi stack <a class=\"direct-link\" href=\"#implementing-the-httpapi-stack\">#</a></h2>\n<p>So that's a bit complicated, but it's actually pretty easy to get a barebones version of this:</p>\n<h3 id=\"httpapi-plugin\" tabindex=\"-1\">HttpApi plugin <a class=\"direct-link\" href=\"#httpapi-plugin\">#</a></h3>\n<p>.../plugins/httpapi/http.py</p>\n<pre class=\"language-python\"><code class=\"language-python\">DOCUMENTATION <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n<span class=\"highlight-line\">---</span>\n<span class=\"highlight-line\">author: lilatomic</span>\n<span class=\"highlight-line\">httpapi: http</span>\n<span class=\"highlight-line\">short_description: generic http connection</span>\n<span class=\"highlight-line\">description: </span>\n<span class=\"highlight-line\">  - This HttpApi plugin provides a generic HTTP client. This makes it quicker to interact with HTTP APIs than using the URI module</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> json</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>httpapi <span class=\"token keyword\">import</span> HttpApiBase</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">EMPTY_DATA <span class=\"token operator\">=</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpApi</span><span class=\"token punctuation\">(</span>HttpApiBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">send_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>EMPTY_DATA<span class=\"token punctuation\">,</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>message_kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># set headers for body</span></span>\n<span class=\"highlight-line\">\t\theaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Accept-Encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data <span class=\"token keyword\">or</span> data <span class=\"token operator\">==</span> EMPTY_DATA<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tdata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\theaders<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/json'</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># actually send the connection</span></span>\n<span class=\"highlight-line\">\t\tr<span class=\"token punctuation\">,</span> r_data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>path<span class=\"token operator\">=</span>path<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> method<span class=\"token operator\">=</span>method<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># data is returned as bytes, so we have to pull it out</span></span>\n<span class=\"highlight-line\">\t\tr_data_serialisable <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>r_data<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"response\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> r_data_serialisable<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"request\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>url</span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>Wow there's actually a lot going on here just to submit requests, and we haven't even gotten into authentication.<br>\nThis barebones version assumes that everything will be JSON in and JSON out, so we can just set the Content-Type header to that.</p>\n<p>Sending the data is done with a call to <code>self.connection.send</code>. As mentioned before, this resolves to the <code>ansible.netcommon.httpapi</code> connection plugin and will eventually make their way to <code>urllib</code>, but not before 2 more layers of munging.</p>\n<p>We then have to unload the body ourselves.</p>\n<p>For the return, note that we're rebuilding most of the response ourselves. This is because the response will need to be serialised over JSON for interprocess communication back to the main Ansible process. Remember when <code>ansible-connection</code> spun this connection off as a separate process? Well there's also a bespoke JSON-rpc remote-method-invocation framework which fails to serialise most of the things returned by the <code>ansible.netcommon.httpapi</code>. One of the things which fails to return is error messages, so I guess just hope you don't get those...</p>\n<h3 id=\"module\" tabindex=\"-1\">Module <a class=\"direct-link\" href=\"#module\">#</a></h3>\n<p>.../plugins/modules/http.py</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token comment\">#!/usr/bin/env python</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">__metaclass__ <span class=\"token operator\">=</span> <span class=\"token builtin\">type</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>module_utils<span class=\"token punctuation\">.</span>basic <span class=\"token keyword\">import</span> AnsibleModule</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>module_utils<span class=\"token punctuation\">.</span>connection <span class=\"token keyword\">import</span> Connection</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>display <span class=\"token keyword\">import</span> Display</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">display <span class=\"token operator\">=</span> Display<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\targument_spec <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"str\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"method\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"str\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"raw\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\tresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\tmodule <span class=\"token operator\">=</span> AnsibleModule<span class=\"token punctuation\">(</span>argument_spec<span class=\"token operator\">=</span>argument_spec<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># get reference to httpapi process through socket path for RMI</span></span>\n<span class=\"highlight-line\">\t\tconnection <span class=\"token operator\">=</span> Connection<span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>_socket_path<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tr <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>send_request<span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\t\tpath<span class=\"token operator\">=</span>module<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\tmethod<span class=\"token operator\">=</span>module<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\tdata<span class=\"token operator\">=</span>module<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tresult<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tmodule<span class=\"token punctuation\">.</span>exit_json<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>result<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tmodule<span class=\"token punctuation\">.</span>fail_json<span class=\"token punctuation\">(</span>msg<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>result<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>We start with the argument spec. This is sorta nice for automatically performing parameter validation for us. For example, if we mistyped the one of the parameter names, we'd get a warning that that parameter wasn't allowed. That's checked during the AnsibleModule instantiation.</p>\n<p>We then get a reference to the httpapi connection, which we defined just above. We use the connection to send the request, which requires us to forward all the parameters. It's a bit cumbersome.</p>\n<p>We then need to use the <code>AnsibleModule.exit_json</code> function. This method is the way to return from an Ansible module. These are executed in separate processes and their return values are gathered from stdout. It's certainly a way to do that. In the event of an error, we use the <code>AnsibleModule.fail_json</code> for the same type of thing, but for failure.</p>\n<p>Don't forget the shebang and the thing that launches the function is it's invoked.</p>\n<h3 id=\"supply-connection-information\" tabindex=\"-1\">Supply connection information <a class=\"direct-link\" href=\"#supply-connection-information\">#</a></h3>\n<p>One of the sneaky ways of adding these connections is to include them as a Host in the inventory file:</p>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"highlight-line\"><span class=\"token key atrule\">all</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">httpbin</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">ansible_connection</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"httpapi\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">ansible_network_os</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"lilatomic.api.http\"</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">ansible_host</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"httpbin.org\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">ansible_port</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"443\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">ansible_httpapi_use_ssl</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></span></code></pre>\n<p><strong>ansible_connection</strong> this must be set to <code>httpapi</code>, and tells Ansible to select the <code>httpapi</code> connection plugin.</p>\n<p><strong>ansible_network_os</strong> this must match the name of your <code>httpapi</code> plugin.</p>\n<p><strong>ansible_host</strong> the host subcomponent of the url</p>\n<p><strong>ansible_port</strong> the port</p>\n<p><strong>ansible_httpapi_use_ssl</strong> whether to use http or https</p>\n<p>I haven't found a way to combine the last 3 parameters. I also haven't found a way to add a start of the URL path component (for example, tomcat-hosted applications are by default hosted at <code>/</code>).</p>\n<h3 id=\"delegate-tasks-to-the-connection\" tabindex=\"-1\">Delegate tasks to the connection <a class=\"direct-link\" href=\"#delegate-tasks-to-the-connection\">#</a></h3>\n<p>This is the easiest way of sending the requests to this connection, in my opinion. It's literally just the <code>delegate_to</code> line:</p>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"highlight-line\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test</span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> localhost</span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">gather_facts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test get</span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">lilatomic.api.http</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/get\"</span></span>\n<span class=\"highlight-line\">        <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"GET\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">delegate_to</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"httpbin\"</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test post</span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">lilatomic.api.http</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/post\"</span></span>\n<span class=\"highlight-line\">        <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"POST\"</span></span>\n<span class=\"highlight-line\">        <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"HIHELLO\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token key atrule\">delegate_to</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"httpbin\"</span></span></code></pre>\n<h2 id=\"other-features-of-httpapi-plugins\" tabindex=\"-1\">Other features of HttpApi Plugins <a class=\"direct-link\" href=\"#other-features-of-httpapi-plugins\">#</a></h2>\n<p>The <code>HttpApiBase</code> base class has several other methods:</p>\n<ul>\n<li>login</li>\n<li>logout</li>\n<li>update_auth</li>\n<li>handle_httperror</li>\n</ul>\n<p>The only method which isn't a virtual method is the handle_httperror. Its behaviour is to try to authenticate if a 401 is returned.</p>\n<p>These methods are also invoked appropriately during the <code>ansible.netcommon.httpapi</code> sessions.</p>\n<h2 id=\"tradeoffs\" tabindex=\"-1\">Tradeoffs <a class=\"direct-link\" href=\"#tradeoffs\">#</a></h2>\n<p>So, there's a lot of implementation stuff. And there's a lot of boilerplate. And it's not even correct.<br>\nThe interface for libraries like <code>requests</code> or <code>urllib3</code> are so much better than this, and don't require any of the machinery to get correct.</p>\n<p>There are many other downsides to this approach. The requests happen either in another process or in a module, which is another process. This makes it almost impossible to get trace logging or unexpected errors.<br>\nYou might also write modules which wrap more complicated operations, like creating a user and granting them permissions. This either needs to happen in a module, so your tracebacks are terrible; or in an action plugin invoking the module multiple times, so now we need to either copypaste the invocations or make <em>another</em> layer as a helper method to invoke the method.<br>\nAnd there are at least 4 layers of munging, so if you're trying to figure out why a GET request is being given <code>&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</code> you might be in for a bad time.</p>\n<p>So all-in-all, I wouldn't recommend using this method.</p>\n",
      "date_published": "2021-06-30T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/ansible_writing_facts_plugin/",
      "url": "https://lilatomic.ca/posts/ansible_writing_facts_plugin/",
      "title": "Writing a Vars Plugin in Ansible",
      "content_html": "<h1 id=\"writing-a-vars-plugin-in-ansible\" tabindex=\"-1\">Writing a Vars Plugin in Ansible <a class=\"direct-link\" href=\"#writing-a-vars-plugin-in-ansible\">#</a></h1>\n<p>Often there are facts you wish were just ambiently available, especially if you are working with cloud infrastructure. For example, you might want to have your subscription id, tenant id, user object id, contents of a resource group, and many other things. You could have tasks which set these as facts, but that severely limits your ability to resume at a task.</p>\n<h2 id=\"basic-outline\" tabindex=\"-1\">Basic outline <a class=\"direct-link\" href=\"#basic-outline\">#</a></h2>\n<p>The most basic version of a vars plugin is just a reflectable classname and method name.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token builtin\">vars</span> <span class=\"token keyword\">import</span> BaseVarsPlugin</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VarsModule</span><span class=\"token punctuation\">(</span>BaseVarsPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_vars</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">,</span> cache<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span></code></pre>\n<p>Let's get our documentation in order. We want to include this fragment to let people know how to set when the plugin runs (See <a href=\"#execution\">Execution</a> for why)</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"highlight-line\"><span class=\"token key atrule\">vars</span><span class=\"token punctuation\">:</span> gitroot</span>\n<span class=\"highlight-line\"><span class=\"token key atrule\">version_added</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.2\"</span> <span class=\"token comment\"># for collections, use the collection version, not the Ansible version</span></span>\n<span class=\"highlight-line\"><span class=\"token key atrule\">short_description</span><span class=\"token punctuation\">:</span> Finds the git root</span>\n<span class=\"highlight-line\"><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> Finds the git root</span>\n<span class=\"highlight-line\"><span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">ini</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> stage</span>\n<span class=\"highlight-line\">        <span class=\"token key atrule\">section</span><span class=\"token punctuation\">:</span> lilatomic.alpacloud.gitroot</span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> LILATOMIC_ALPACLOUD_GITROOT</span>\n<span class=\"highlight-line\"><span class=\"token key atrule\">extends_documentation_fragment</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">-</span> vars_plugin_staging</span></code></pre>\n<p>Combining we get a sample like:</p>\n<pre class=\"language-python\"><code class=\"language-python\">DOCUMENTATION <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">vars: gitroot</span>\n<span class=\"highlight-line\">version_added: \"0.2\"</span>\n<span class=\"highlight-line\">short_description: Finds the git root</span>\n<span class=\"highlight-line\">description: Finds the git root</span>\n<span class=\"highlight-line\">options:</span>\n<span class=\"highlight-line\">  stage:</span>\n<span class=\"highlight-line\">    ini:</span>\n<span class=\"highlight-line\">      - key: stage</span>\n<span class=\"highlight-line\">        section: lilatomic.alpacloud.gitroot</span>\n<span class=\"highlight-line\">    env:</span>\n<span class=\"highlight-line\">      - name: LILATOMIC_ALPACLOUD_GITROOT</span>\n<span class=\"highlight-line\">extends_documentation_fragment:</span>\n<span class=\"highlight-line\">  - vars_plugin_staging</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> subprocess</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token builtin\">vars</span> <span class=\"token keyword\">import</span> BaseVarsPlugin</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VarsModule</span><span class=\"token punctuation\">(</span>BaseVarsPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Must be named VarsModule</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># Not necessary if you're just going to call up</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_vars</span><span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\tself<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">,</span> cache<span class=\"token operator\">=</span><span class=\"token boolean\">None</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># the function which actualy does the lookup</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># call to super. `self._basedir = basedir(path)`</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>VarsModule<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_vars<span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">:</span> _get_git_root<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">_get_git_root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tres <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"git rev-parse --show-toplevel\"</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\tstdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\tuniversal_newlines<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>stdout</span></code></pre>\n<p>This sample is really bad, because it gets executed <em>a lot</em> (See <a href=\"#execution\">Execution</a>). So we want to build some caching into it. This is patterned off of how host_group_vars does it (the only vars plugin included in base), but other vars plugins do a similar thing:</p>\n<pre class=\"language-python\"><code class=\"language-python\">DOCUMENTATION <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">vars: gitroot</span>\n<span class=\"highlight-line\">version_added: \"0.2\"</span>\n<span class=\"highlight-line\">short_description: Finds the git root</span>\n<span class=\"highlight-line\">description: Finds the git root</span>\n<span class=\"highlight-line\">options:</span>\n<span class=\"highlight-line\">  stage:</span>\n<span class=\"highlight-line\">    ini:</span>\n<span class=\"highlight-line\">      - key: stage</span>\n<span class=\"highlight-line\">        section: lilatomic.alpacloud.gitroot</span>\n<span class=\"highlight-line\">    env:</span>\n<span class=\"highlight-line\">      - name: LILATOMIC_ALPACLOUD_GITROOT</span>\n<span class=\"highlight-line\">extends_documentation_fragment:</span>\n<span class=\"highlight-line\">  - vars_plugin_staging</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> subprocess</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token builtin\">vars</span> <span class=\"token keyword\">import</span> BaseVarsPlugin</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">FOUND <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VarsModule</span><span class=\"token punctuation\">(</span>BaseVarsPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_vars</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">,</span> cache<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>entities<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tentities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>entities<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>VarsModule<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_vars<span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token string\">\"src\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> FOUND<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tFOUND<span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _get_git_root<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">:</span> FOUND<span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">_get_git_root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tres <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"git rev-parse --show-toplevel\"</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\tstdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\tuniversal_newlines<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>stdout</span></code></pre>\n<h2 id=\"using-hosts-and-groups\" tabindex=\"-1\">Using hosts and groups <a class=\"direct-link\" href=\"#using-hosts-and-groups\">#</a></h2>\n<p>In the above example, we added a general var (one which isn't attached to a particular host). We may want to add other data associated with each host or group. There are a couple moving pieces detailed in the following:</p>\n<pre class=\"language-python\"><code class=\"language-python\">DOCUMENTATION <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">vars: knownhostentry</span>\n<span class=\"highlight-line\">version_added: \"0.2\"</span>\n<span class=\"highlight-line\">short_description: Adds a known-hosts entry for each host, if you have one</span>\n<span class=\"highlight-line\">description: </span>\n<span class=\"highlight-line\">  - Adds a known-hosts entry for each host, if you have one in you local known-hosts</span>\n<span class=\"highlight-line\">  - Useful for not having to construct it every time</span>\n<span class=\"highlight-line\">options:</span>\n<span class=\"highlight-line\">  stage:</span>\n<span class=\"highlight-line\">    ini:</span>\n<span class=\"highlight-line\">      - key: stage</span>\n<span class=\"highlight-line\">        section: lilatomic.alpacloud.knownhostentry</span>\n<span class=\"highlight-line\">    env:</span>\n<span class=\"highlight-line\">      - name: LILATOMIC_ALPACLOUD_KNOWNHOSTENTRY</span>\n<span class=\"highlight-line\">extends_documentation_fragment:</span>\n<span class=\"highlight-line\">  - vars_plugin_staging</span>\n\"\"\"</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> json</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> os</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> subprocess</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>errors <span class=\"token keyword\">import</span> AnsibleParserError</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>module_utils<span class=\"token punctuation\">.</span>_text <span class=\"token keyword\">import</span> to_bytes<span class=\"token punctuation\">,</span> to_native<span class=\"token punctuation\">,</span> to_text</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token builtin\">vars</span> <span class=\"token keyword\">import</span> BaseVarsPlugin</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>inventory<span class=\"token punctuation\">.</span>host <span class=\"token keyword\">import</span> Host</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>inventory<span class=\"token punctuation\">.</span>group <span class=\"token keyword\">import</span> Group</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token builtin\">vars</span> <span class=\"token keyword\">import</span> combine_vars</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>display <span class=\"token keyword\">import</span> Display</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">display <span class=\"token operator\">=</span> Display<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">FOUND <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VarsModule</span><span class=\"token punctuation\">(</span>BaseVarsPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_vars</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">,</span> cache<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># not sure what this is about, it's not invoked when I run it</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># there's probably a compatibility thing</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>entities<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tentities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>entities<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>VarsModule<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_vars<span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tdata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token comment\"># loop through entities</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">for</span> entity <span class=\"token keyword\">in</span> entities<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token comment\"># entities come as either Hosts or Groups. This example ignores groups.</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">,</span> Host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">,</span> Group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">continue</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">raise</span> AnsibleParserError<span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"Supplied entity must be Host or Group, got %s instead\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">if</span> entity<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token comment\"># avoid 'chroot' type inventory hostnames /path/to/chroot</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token comment\"># this is from the sample plugin</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">continue</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tkey <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">if</span> cache <span class=\"token keyword\">and</span> key <span class=\"token keyword\">in</span> FOUND<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\tknown_hosts <span class=\"token operator\">=</span> FOUND<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\tFOUND<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _get_known_host<span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t\tknown_hosts <span class=\"token operator\">=</span> FOUND<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">if</span> known_hosts<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\tdata<span class=\"token punctuation\">[</span><span class=\"token string\">\"known_hosts\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> known_hosts</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tdisplay<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string\">\"HALP\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">raise</span> AnsibleParserError<span class=\"token punctuation\">(</span>to_native<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tdisplay<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> data</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">_get_known_host</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token operator\">=</span><span class=\"token string\">\"~/.ssh/known_hosts\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>expanduser<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\tcmd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/usr/bin/ssh-keygen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-f\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-F\"</span><span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\tdisplay<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"cmd : </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>cmd<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tres <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\tcmd<span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> universal_newlines<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tdisplay<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"stdout </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>res<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tdisplay<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"stderr </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>res<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tdisplay<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\tlines <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\thostlines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> lines <span class=\"token keyword\">if</span> x <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> x<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> hostlines</span>\n<span class=\"highlight-line\"></span></code></pre>\n<h2 id=\"loading-files\" tabindex=\"-1\">Loading files <a class=\"direct-link\" href=\"#loading-files\">#</a></h2>\n<p>You can probably figure out how to load files by cribbing from the host_group_vars plugin. I've included one here for completeness. The main difference is that <code>loader.load_from_file</code> only supports YAML/JSON, so we write our own little functionlet.</p>\n<pre class=\"language-python\"><code class=\"language-python\">DOCUMENTATION <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">vars: dhall_vars</span>\n<span class=\"highlight-line\">version_added: \"0.2\"</span>\n<span class=\"highlight-line\">short_description: Loads vars from a Dhall file</span>\n<span class=\"highlight-line\">description: </span>\n<span class=\"highlight-line\">  - Loads vars from a Dhall file</span>\n<span class=\"highlight-line\">options:</span>\n<span class=\"highlight-line\">  stage:</span>\n<span class=\"highlight-line\">    ini:</span>\n<span class=\"highlight-line\">      - key: stage</span>\n<span class=\"highlight-line\">        section: lilatomic.alpacloud.dhall_vars</span>\n<span class=\"highlight-line\">    env:</span>\n<span class=\"highlight-line\">      - name: LILATOMIC_ALPACLOUD_DHALL_VARS</span>\n<span class=\"highlight-line\">extends_documentation_fragment:</span>\n<span class=\"highlight-line\">  - vars_plugin_staging</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> os</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> subprocess</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>errors <span class=\"token keyword\">import</span> AnsibleParserError</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>module_utils<span class=\"token punctuation\">.</span>_text <span class=\"token keyword\">import</span> to_bytes<span class=\"token punctuation\">,</span> to_native<span class=\"token punctuation\">,</span> to_text</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token builtin\">vars</span> <span class=\"token keyword\">import</span> BaseVarsPlugin</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>inventory<span class=\"token punctuation\">.</span>host <span class=\"token keyword\">import</span> Host</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>inventory<span class=\"token punctuation\">.</span>group <span class=\"token keyword\">import</span> Group</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token builtin\">vars</span> <span class=\"token keyword\">import</span> combine_vars</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">FOUND <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VarsModule</span><span class=\"token punctuation\">(</span>BaseVarsPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_vars</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">,</span> cache<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>entities<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\tentities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>entities<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>VarsModule<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_vars<span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\tdata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">for</span> entity <span class=\"token keyword\">in</span> entities<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token comment\"># we set the subdir here</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">,</span> Host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tsubdir <span class=\"token operator\">=</span> <span class=\"token string\">\"host_vars\"</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">,</span> Group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\tsubdir <span class=\"token operator\">=</span> <span class=\"token string\">\"group_vars\"</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">raise</span> AnsibleParserError<span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token string\">\"Supplied entity must be Host or Group, got %s instead\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token comment\"># avoid 'chroot' type inventory hostnames /path/to/chroot</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">if</span> entity<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">continue</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token comment\"># mostly copied from host_group_vars</span></span>\n<span class=\"highlight-line\">\t\t\t\tfound_files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token comment\"># load vars</span></span>\n<span class=\"highlight-line\">\t\t\t\tb_opath <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>realpath<span class=\"token punctuation\">(</span>to_bytes<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_basedir<span class=\"token punctuation\">,</span> subdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\topath <span class=\"token operator\">=</span> to_text<span class=\"token punctuation\">(</span>b_opath<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\tself<span class=\"token punctuation\">.</span>_display<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\tprocessing dir %s\"</span> <span class=\"token operator\">%</span> opath<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token comment\"># We set the cache key to be specific to both entity and file</span></span>\n<span class=\"highlight-line\">\t\t\t\tkey <span class=\"token operator\">=</span> <span class=\"token string\">\"%s.%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> opath<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">if</span> cache <span class=\"token keyword\">and</span> key <span class=\"token keyword\">in</span> FOUND<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token comment\"># cache hit</span></span>\n<span class=\"highlight-line\">\t\t\t\t\tfound_files <span class=\"token operator\">=</span> FOUND<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>b_opath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t<span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>b_opath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\tself<span class=\"token punctuation\">.</span>_display<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\tprocessing dir %s\"</span> <span class=\"token operator\">%</span> opath<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\t<span class=\"token comment\"># use the file loader to load</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\tfound_files <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span>find_vars_files<span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\t\tpath<span class=\"token operator\">=</span>opath<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\t\tname<span class=\"token operator\">=</span>entity<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\t\textensions<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".dhall\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\t\t<span class=\"token comment\"># allow_dir=True</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\t<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\tself<span class=\"token punctuation\">.</span>_display<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\t\t<span class=\"token string\">\"Found %s that is not a directory, skipping: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>subdir<span class=\"token punctuation\">,</span> opath<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\t\t<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">for</span> found <span class=\"token keyword\">in</span> found_files<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t\tnew_data <span class=\"token operator\">=</span> _read_dhall_file<span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t<span class=\"token keyword\">if</span> new_data<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># ignore empty files</span></span>\n<span class=\"highlight-line\">\t\t\t\t\t\tdata <span class=\"token operator\">=</span> combine_vars<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> new_data<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t\t<span class=\"token keyword\">raise</span> AnsibleParserError<span class=\"token punctuation\">(</span>to_native<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> data</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">_read_dhall_file</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tctn <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">vars</span> <span class=\"token operator\">=</span> dhall<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>ctn<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">vars</span></span></code></pre>\n<h2 id=\"execution\" tabindex=\"-1\">Execution <a class=\"direct-link\" href=\"#execution\">#</a></h2>\n<p>Vars plugins are invoked at 2 stages:</p>\n<ol>\n<li>Inventory : upon initial inventory parsing</li>\n</ol>\n<ul>\n<li>once for every group (including &quot;all&quot; and &quot;ungrouped&quot;)</li>\n<li>once for every host</li>\n</ul>\n<ol>\n<li>Task : every task</li>\n</ol>\n<ul>\n<li>once per cartesian product of:\n<ul>\n<li>entity: hostname or group involved in the play</li>\n<li>path:\n<ul>\n<li>each inventory source path</li>\n<li>the basedir for the play (or the nested play)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>This can be specified with the option specified in the documentation.</p>\n<p>This is why you want your plugin to implement a load phase and some form of caching!</p>\n",
      "date_published": "2021-03-10T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/ansible_writing_filter_plugin/",
      "url": "https://lilatomic.ca/posts/ansible_writing_filter_plugin/",
      "title": "Writing a Filter Plugin in Ansible",
      "content_html": "<h1 id=\"writing-a-filter-plugin-in-ansible\" tabindex=\"-1\">Writing a Filter Plugin in Ansible <a class=\"direct-link\" href=\"#writing-a-filter-plugin-in-ansible\">#</a></h1>\n<p>You might find that you're doing the same kind of data-munging in multiple places. There are many cases where you'd want to pull this into a little named package:</p>\n<ul>\n<li>It requires logic which can't be expressed simply in basic jinja filters</li>\n<li>It's common and used in many places, so there's lots of duplication</li>\n<li>It's uncommon and you can never remember the requirements</li>\n<li>It's actually complicated</li>\n<li>You just want to name what these 3 filters do together</li>\n</ul>\n<h2 id=\"basic-outline\" tabindex=\"-1\">Basic outline <a class=\"direct-link\" href=\"#basic-outline\">#</a></h2>\n<p>The basic outline of a plugin is as follows:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> re</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">storage_account</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 3</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">\"[^a-z0-9]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterModule</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 1</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">filters</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 2</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"storage_account\"</span><span class=\"token punctuation\">:</span> storage_account<span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 4</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<ol>\n<li>Create a class FilterModule</li>\n<li>Create a function <code>filters</code></li>\n<li>Define your function</li>\n<li>Return a dict with k-vs of <code>filter_name:function_reference</code></li>\n</ol>\n<h2 id=\"documenting-your-plugin\" tabindex=\"-1\">Documenting your plugin <a class=\"direct-link\" href=\"#documenting-your-plugin\">#</a></h2>\n<p>If you want your documentation to work with the Ansible tooling (showing up nicely in the docs, working with <code>ansible-doc</code>), you can't use the standard ansible documentation, since Filter plugins don't show up as an option you can select documentation for. Go figure. You can still try to use the standard documentation features, though.</p>\n<p>You can include only the sections of the documentation that you want to appear. Here's the <a href=\"https://docs.ansible.com/ansible/2.10/dev_guide/developing_modules_documenting.html\">full referece</a> for the version this article was written to. For convenience, here they are:</p>\n<ul>\n<li>Shebang &amp; encoding</li>\n<li>Copyright</li>\n<li>DOCUMENTATION (includes module parameters)</li>\n<li>EXAMPLES</li>\n<li>RETURN</li>\n</ul>\n<p>These have to be python strings which contain the YAML. This makes it kinda gross to work on, since you have no YAML syntax highlighting to help you. Here's a stub python file (feel free to change the license line):</p>\n<p>{% raw %}</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token comment\">#!/usr/bin/python</span></span>\n<span class=\"highlight-line\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"highlight-line\"><span class=\"token comment\"># Copyright: (c) {{ year }}, {{ Your Name }} &lt;{{ your email }}></span></span>\n<span class=\"highlight-line\"><span class=\"token comment\"># GNU Affero General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/agpl-3.0.txt)</span></span>\n<span class=\"highlight-line\"></span>\nDOCUMENTATION <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">module:</span>\n<span class=\"highlight-line\">short_description:</span>\n<span class=\"highlight-line\">description:</span>\n<span class=\"highlight-line\">  -</span>\n<span class=\"highlight-line\">version_added: \"0.1.0\"</span>\n<span class=\"highlight-line\">options:</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\nEXAMPLES <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\nRETURN <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">{{ key }}:</span>\n<span class=\"highlight-line\">  desctiption:</span>\n<span class=\"highlight-line\">  returned:</span>\n<span class=\"highlight-line\">  type:</span>\n<span class=\"highlight-line\">  sample:</span>\n\"\"\"</span></code></pre>\n<p>{% endraw %}</p>\n<h2 id=\"common-things-you'd-want-to-do\" tabindex=\"-1\">Common things you'd want to do <a class=\"direct-link\" href=\"#common-things-you'd-want-to-do\">#</a></h2>\n<h3 id=\"using-an-existing-filter\" tabindex=\"-1\">Using an existing filter <a class=\"direct-link\" href=\"#using-an-existing-filter\">#</a></h3>\n<p>If you want to use an existing filter plugin (perhaps to format your output), you can just import them from the Ansible package:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> to_json<span class=\"token punctuation\">,</span> quote</span></code></pre>\n<h3 id=\"including-other-parameters-in-your-filter\" tabindex=\"-1\">Including other parameters in your filter <a class=\"direct-link\" href=\"#including-other-parameters-in-your-filter\">#</a></h3>\n<p>If you want to have other parameters in your filter, you can just do that</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> ipaddress <span class=\"token keyword\">import</span> ip_network</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">ip_in_snet</span><span class=\"token punctuation\">(</span>snet<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t_snet <span class=\"token operator\">=</span> ip_network<span class=\"token punctuation\">(</span>snet<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t_ip <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> _snet<span class=\"token punctuation\">[</span>_ip<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterModule</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">filters</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"ip_in_snet\"</span><span class=\"token punctuation\">:</span> ip_in_snet<span class=\"token punctuation\">}</span></span></code></pre>\n<p>and then use that like you'd expect, more or less</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"> <span class=\"token string\">\"{{ '10.0.1.0/24' | ip_in_snet(10) }}\"</span> </span></code></pre>\n<h3 id=\"building-an-extractor\" tabindex=\"-1\">Building an extractor <a class=\"direct-link\" href=\"#building-an-extractor\">#</a></h3>\n<p>Sometimes you can't remember the sequence of keys you need to extract that thing you want from the huge JSON blob. You can write a simple extractor:</p>\n<pre class=\"language-python\"><code class=\"language-python\">DOCUMENTATION <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">name: extract_connectionstring</span>\n<span class=\"highlight-line\">short_description: extracts the connection stirng from azure_rm_storageaccount_info</span>\n<span class=\"highlight-line\">description:</span>\n<span class=\"highlight-line\">  - extracts the connection stirng from M(azure_rm_storageaccount_info)</span>\n<span class=\"highlight-line\">  - make sure to use the option C(show_connection_string: true) on the M(azure_rm_storageaccount_info) invocation</span>\n<span class=\"highlight-line\">options:</span>\n<span class=\"highlight-line\">  rm_info:</span>\n<span class=\"highlight-line\">  description: </span>\n<span class=\"highlight-line\">    - The result of azure_rm_storageaccount_info</span>\n<span class=\"highlight-line\">  type: object</span>\n<span class=\"highlight-line\">  required: True</span>\n<span class=\"highlight-line\">  endpoint:</span>\n<span class=\"highlight-line\">  description:</span>\n<span class=\"highlight-line\">    - The storageaccount endpoint to get the connectionstring for</span>\n<span class=\"highlight-line\">    - if blank, will fetch for blob</span>\n<span class=\"highlight-line\">    - use \"key\" to get the key itself</span>\n<span class=\"highlight-line\">  choices: [\"blob\", \"file\", \"queue\", \"table\", \"key\"]</span>\n<span class=\"highlight-line\">  required: False</span>\n<span class=\"highlight-line\">    default: blob</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\nEXAMPLES <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">- name: get storageaccount info</span>\n<span class=\"highlight-line\">  azure_rm_storageaccount_info:</span>\n<span class=\"highlight-line\">    name: \"{{ storage_acount_name }}\"</span>\n<span class=\"highlight-line\">    resource_group \"{{ rg }}\"</span>\n<span class=\"highlight-line\">    show_connection_string: true # important !</span>\n<span class=\"highlight-line\">  register: storageaccount_raw</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">- name: get blob connection string</span>\n<span class=\"highlight-line\">  set_fact:</span>\n<span class=\"highlight-line\">    blob_connectionstring: \"{{ storageaccount_raw | extract_connectionstring }}</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">- name: get connection string for something other than blob</span>\n<span class=\"highlight-line\">  set_fact:</span>\n<span class=\"highlight-line\">    table_connectionstring: \"{{ storageaccount_raw | extract_connectionstring('table') }}</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">- name: get account key</span>\n<span class=\"highlight-line\">  set_fact:</span>\n<span class=\"highlight-line\">    connectionstring: \"{{ storageaccount_raw | extract_connectionstring('key') }}</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">extract_connectionstring</span><span class=\"token punctuation\">(</span>rm_info<span class=\"token punctuation\">,</span> endpoint<span class=\"token operator\">=</span><span class=\"token string\">\"blob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">if</span> endpoint <span class=\"token operator\">==</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> rm_info<span class=\"token punctuation\">[</span><span class=\"token string\">\"storageaccounts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"primary_endpoints\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> rm_info<span class=\"token punctuation\">[</span><span class=\"token string\">\"storageaccounts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"primary_endpoints\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>endpoint<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"connectionstring\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterModule</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">filters</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"extract_connectionstring\"</span><span class=\"token punctuation\">:</span> extract_connectionstring<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<h2 id=\"abusing-filters-as-functions\" tabindex=\"-1\">Abusing filters as functions <a class=\"direct-link\" href=\"#abusing-filters-as-functions\">#</a></h2>\n<p>Let's say that you want to have some functions assemble things, like you would with some proper typed data modelling. I'm not saying this is a <em>good</em> idea, but you can use functions as the closest thing to that (it's not really close). For an example, I always forget the little fiddly bits of assembling an Azure Storageaccount Lifecycle Policy. I could do the following:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> _includes<span class=\"token punctuation\">.</span>resources<span class=\"token punctuation\">.</span>ansible_plugins<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">.</span>extractor <span class=\"token keyword\">import</span> EXAMPLES</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\nEXAMPLES <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">- name: format lifecycle policy</span>\n<span class=\"highlight-line\">  set_fact:</span>\n<span class=\"highlight-line\">    autodelete_rule: \"{{ \"autodelete\" | storageaccount_lifecycle_rule(filters, blob_actions) }}</span>\n<span class=\"highlight-line\">  vars:</span>\n<span class=\"highlight-line\">    blob_actions:</span>\n<span class=\"highlight-line\">      - {\"delete\":{\"daysAfterModificationGreaterThan\": 30}}</span>\n<span class=\"highlight-line\">    filters:</span>\n<span class=\"highlight-line\">      - {\"blobTypes\":[\"blockBlob\"],\"prefixMatch\":[\"my_container\"]}</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Dict</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">rule</span><span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\tname<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\tfilters<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\tactions_blob<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\tactions_version<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"enabled\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lifecycle\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token string\">\"definitions\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"actions\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"baseBlob\"</span><span class=\"token punctuation\">:</span> actions_blob<span class=\"token punctuation\">,</span> <span class=\"token string\">\"versions\"</span><span class=\"token punctuation\">:</span> actions_version<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token string\">\"filters\"</span><span class=\"token punctuation\">:</span> filters<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterModule</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">filters</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"storageaccount_lifecycle_rule\"</span><span class=\"token punctuation\">:</span> rule<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>And yes, you can also build filters to construct those <code>filters</code> and <code>blob_actions</code>, and make a terrible filter chain. But maybe don't and just write a one-off plugin.</p>\n",
      "date_published": "2021-02-24T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/ansible_writing_action_plugin/",
      "url": "https://lilatomic.ca/posts/ansible_writing_action_plugin/",
      "title": "Writing an Action Plugin in Ansible",
      "content_html": "<h1 id=\"writing-an-action-plugin-in-ansible\" tabindex=\"-1\">Writing an Action Plugin in Ansible <a class=\"direct-link\" href=\"#writing-an-action-plugin-in-ansible\">#</a></h1>\n<p>It's common to want to wrap up a task in Ansible into a reusable unit. This is especially common with common shell commands. Ansible has a few ways to do that.</p>\n<ol>\n<li>Including a task list</li>\n<li>Module plugin</li>\n<li>Action plugin</li>\n</ol>\n<p>Including a task list is the most straightforward: just have an <code>import_tasks</code> directive. You can set variables for that task with an attached <code>vars</code> attribute. There are several downsides to this method. The most obvious is that there isn't a good way of distributing task lists, either with Ansible-Galaxy or without it. Another downside is that there is a lack of documentation. Yet another is that it can be complicated to provide some basic defaults, formatting, validation, and debugging.</p>\n<p>Ansible Module plugins might sound like the right thing, especially since the Ansible documentation says that if you use the <code>command</code> module a lot you might want to write one of these. When you look into the documentation, the difference between these and an Action plugin becomes murky. The capabilities of each aren't clearly outlined, despite them being practically welded to each other. You may also find documentation which says that when resolving what action to take from a task in a playbook, Ansible will first look for a match for the task action in the Action plugins and, if one isn't found, in the Modules.</p>\n<p>The short distinction is that Modules are the code which will get uploaded to the target machine and then launched, and Action modules run on the controller. Action plugins have access to useful Ansible function, like <code>_execute_module</code>, which allows you to wrap an existing directive (or launch a specially-built <code>command</code>). Note that these executed modules function like you'd expect: on the remote machine.</p>\n<p>So, most likely, you'll want to use an Action plugin.</p>\n<h2 id=\"basic-outline\" tabindex=\"-1\">Basic outline <a class=\"direct-link\" href=\"#basic-outline\">#</a></h2>\n<p>The basic outline of a plugin is as follows:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>action <span class=\"token keyword\">import</span> ActionBase  <span class=\"token comment\"># 1</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ActionModule</span><span class=\"token punctuation\">(</span>ActionBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 2</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 3</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">,</span> task_vars<span class=\"token operator\">=</span>task_vars<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># 5</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<ol>\n<li>Import the plugin base</li>\n<li>Create a class called ActionModule. To name the plugin, put it in a file with that name.</li>\n<li>Make the <code>run</code> method</li>\n<li>Invoke the <code>super().run</code> method</li>\n<li>Return results as a dict</li>\n</ol>\n<h2 id=\"documenting-your-plugin\" tabindex=\"-1\">Documenting your plugin <a class=\"direct-link\" href=\"#documenting-your-plugin\">#</a></h2>\n<p>If you want your documentation to work with the Ansible tooling (showing up nicely in the docs, working with <code>ansible-doc</code>), you have to create an Ansible Module for that as well. The module can contain only documentation.</p>\n<p>You can include only the sections of the documentation that you want to appear. Here's the <a href=\"https://docs.ansible.com/ansible/2.10/dev_guide/developing_modules_documenting.html\">full referece</a> for the version this article was written to. For convenience, here they are:</p>\n<ul>\n<li>Shebang &amp; encoding</li>\n<li>Copyright</li>\n<li>DOCUMENTATION (includes module parameters)</li>\n<li>EXAMPLES</li>\n<li>RETURN</li>\n</ul>\n<p>These have to be python strings which contain the YAML. This makes it kinda gross to work on, since you have no YAML syntax highlighting to help you. Here's a stub python file (feel free to change the license line):</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token comment\">#!/usr/bin/python</span></span>\n<span class=\"highlight-line\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"highlight-line\"><span class=\"token comment\"># Copyright: (c) {{ year }}, {{ Your Name }} &lt;{{ your email }}></span></span>\n<span class=\"highlight-line\"><span class=\"token comment\"># GNU Affero General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/agpl-3.0.txt)</span></span>\n<span class=\"highlight-line\"></span>\nDOCUMENTATION <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">module:</span>\n<span class=\"highlight-line\">short_description:</span>\n<span class=\"highlight-line\">description:</span>\n<span class=\"highlight-line\">  -</span>\n<span class=\"highlight-line\">version_added: \"0.1.0\"</span>\n<span class=\"highlight-line\">options:</span>\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\nEXAMPLES <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n\"\"\"</span>\n<span class=\"highlight-line\"></span>\nRETURN <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">r\"\"\"\n<span class=\"highlight-line\">{{ key }}:</span>\n<span class=\"highlight-line\">  desctiption:</span>\n<span class=\"highlight-line\">  returned:</span>\n<span class=\"highlight-line\">  type:</span>\n<span class=\"highlight-line\">  sample:</span>\n\"\"\"</span></code></pre>\n<h2 id=\"common-things-you'd-want-to-do\" tabindex=\"-1\">Common things you'd want to do <a class=\"direct-link\" href=\"#common-things-you'd-want-to-do\">#</a></h2>\n<h3 id=\"run-another-module%2Faction-plugin\" tabindex=\"-1\">Run another module/action plugin <a class=\"direct-link\" href=\"#run-another-module%2Faction-plugin\">#</a></h3>\n<p>Inside of your <code>run</code> method:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\">module_name <span class=\"token operator\">=</span> <span class=\"token string\">\"???\"</span></span>\n<span class=\"highlight-line\">module_args<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"???\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"???\"</span><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_execute_module<span class=\"token punctuation\">(</span> <span class=\"token comment\">#1</span></span>\n<span class=\"highlight-line\">\tmodule_name<span class=\"token operator\">=</span>module_name<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\tmodule_args<span class=\"token operator\">=</span>module_args<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\ttask_vars<span class=\"token operator\">=</span>task_vars<span class=\"token punctuation\">,</span> <span class=\"token comment\">#2</span></span>\n<span class=\"highlight-line\">\t<span class=\"token comment\">#3</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">)</span></span></code></pre>\n<ol>\n<li>use the <code>self._execute_module</code> method</li>\n<li>generally pass these forward, don't forget to provide them</li>\n<li>tmp no longer has any effect, if the comments are to be believed, so we don't need to forward it.</li>\n</ol>\n<h3 id=\"run-a-freeform-command\" tabindex=\"-1\">Run a freeform command <a class=\"direct-link\" href=\"#run-a-freeform-command\">#</a></h3>\n<p>If you just want to wrap a task like</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"highlight-line\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run thing</span>\n<span class=\"highlight-line\">  <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">    <span class=\"token key atrule\">cmd</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Some freeform text\"</span></span></code></pre>\n<p>You will need to provide the <code>cmd</code> arg as the value of &quot;_raw_params&quot; to the module_args.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\">cmd<span class=\"token operator\">=</span><span class=\"token string\">\"ls -la\"</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_execute_module<span class=\"token punctuation\">(</span></span>\n<span class=\"highlight-line\">\tmodule_name<span class=\"token operator\">=</span>module_name<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\tmodule_args<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"_raw_params\"</span><span class=\"token punctuation\">:</span> cmd<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\ttask_vars<span class=\"token operator\">=</span>task_vars<span class=\"token punctuation\">,</span></span>\n<span class=\"highlight-line\">\ttmp<span class=\"token operator\">=</span>tmp</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">)</span></span></code></pre>\n<h3 id=\"adding-a-fact\" tabindex=\"-1\">Adding a fact <a class=\"direct-link\" href=\"#adding-a-fact\">#</a></h3>\n<p>Ansible wants you to use a Fact plugin for these, but sometimes a fact only makes sense mid-playbook. Simply set the &quot;ansible_facts&quot; key with a dictionary of the facts you want to add:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"ansible_facts\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"FACT\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span></code></pre>\n<h3 id=\"using-an-existing-filter\" tabindex=\"-1\">Using an existing filter <a class=\"direct-link\" href=\"#using-an-existing-filter\">#</a></h3>\n<p>If you want to use an existing filter plugin (perhaps to format your output), you can just import them from the Ansible package:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">from</span> ansible<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> to_json<span class=\"token punctuation\">,</span> quote</span></code></pre>\n",
      "date_published": "2021-02-22T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/microstack/",
      "url": "https://lilatomic.ca/posts/microstack/",
      "title": "SSL with Microstack",
      "content_html": "<h1 id=\"ssl-with-microstack\" tabindex=\"-1\">SSL with Microstack <a class=\"direct-link\" href=\"#ssl-with-microstack\">#</a></h1>\n<h2 id=\"setting-up-https-on-horizon-(the-dashboard)\" tabindex=\"-1\">Setting up HTTPS on Horizon (the dashboard) <a class=\"direct-link\" href=\"#setting-up-https-on-horizon-(the-dashboard)\">#</a></h2>\n<p>Let's follow the docs <a href=\"https://docs.openstack.org/horizon/latest/admin/customize-configure.html#configure-dashboard\">here</a></p>\n<p>The config files for microstack are all in the snap directory, so look in <code>/var/snap/microstack/common/etc</code>. We want to change the hostname by replacing the relevant lines:</p>\n<p>:/common/etc/local_settings.d/_05_snap_tweaks.py</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\">OPENSTACK_HOST <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></span>\n<span class=\"highlight-line\">ALLOWED_HOSTS <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></span></code></pre>\n<h2 id=\"ssl-cert\" tabindex=\"-1\">SSL Cert <a class=\"direct-link\" href=\"#ssl-cert\">#</a></h2>\n<p>I tossed my cert and key into :/common/etc/ssl/private . Make sure to give it appropriate permissions</p>\n<h2 id=\"nginx\" tabindex=\"-1\">Nginx <a class=\"direct-link\" href=\"#nginx\">#</a></h2>\n<p>The config for horizon lives in :/common/etc/nginx/snap/sites-enabled/horizon.conf . I replaced the <code>listen</code> directive, gave it a <code>server_name</code>, and added the <code>ssl_certificate</code> and <code>ssl_certificate_key</code>. I found that giving the absolute path to the SSL folder worked. That gives us:</p>\n<pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"highlight-line\"><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t<span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">443</span> ssl</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t<span class=\"token directive\"><span class=\"token keyword\">server_name</span> alpacloud.lilatomic.ca</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token directive\"><span class=\"token keyword\">ssl_certificate</span> /var/snap/microstack/common/etc/ssl/private/certificate.pem</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t<span class=\"token directive\"><span class=\"token keyword\">ssl_certificate_key</span> /var/snap/microstack/common/etc/ssl/private/private-key.pem</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token directive\"><span class=\"token keyword\">client_max_body_size</span> <span class=\"token number\">16G</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token directive\"><span class=\"token keyword\">error_log</span> syslog:server=unix:/dev/log</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t<span class=\"token directive\"><span class=\"token keyword\">access_log</span> syslog:server=unix:/dev/log</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t<span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token directive\"><span class=\"token keyword\">include</span> /snap/microstack/222/usr/conf/uwsgi_params</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token directive\"><span class=\"token keyword\">uwsgi_param</span> SCRIPT_NAME <span class=\"token string\">''</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token directive\"><span class=\"token keyword\">uwsgi_pass</span> unix:///var/snap/microstack/common/run/horizon.sock</span><span class=\"token punctuation\">;</span></span>\n<span class=\"highlight-line\">\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n",
      "date_published": "2021-02-17T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/changing_password_on_kartoza_osm/",
      "url": "https://lilatomic.ca/posts/changing_password_on_kartoza_osm/",
      "title": "Changing the password on kartoza/docker-osm",
      "content_html": "<p>Default credentials are not acceptable. <a href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials\">OWASP link</a></p>\n<p>I made my changes on commit <a href=\"https://github.com/kartoza/docker-osm/commit/90735fae170a18bb1c288c0503cf9905561c973d\">90735fae170a18bb1c288c0503cf9905561c973d</a>.</p>\n<p>There are several places the username and password must be changed:</p>\n<ol>\n<li>Docker compose:\n<ol>\n<li>services.db.environment.POSTGRES_USER</li>\n<li>services.db.environment.POSTGRES_PASS</li>\n<li>services.db.environment.POSTGRES_DBNAME</li>\n<li>services.imposm.environment.POSTGRES_USER</li>\n<li>services.imposm.environment.POSTGRES_PASS</li>\n<li>services.imposm.environment.POSTGRES_DBNAME</li>\n<li>services.osmenrich.environment.POSTGRES_USER</li>\n<li>services.osmenrich.environment.POSTGRES_PASS</li>\n<li>services.osmenrich.environment.POSTGRES_DBNAME</li>\n</ol>\n</li>\n<li>settings/qgis_style.sql\n<ol>\n<li>l40 change OWNER</li>\n<li>l54 change OWNER</li>\n<li>l814 change docker to osm</li>\n<li>l1589 change docker to osm</li>\n<li>l1860 change docker to osm</li>\n<li>l2154 change docker to osm</li>\n<li>l2423 change docker to osm</li>\n<li>l3027 change docker to osm</li>\n<li>l3297 change docker to osm</li>\n</ol>\n</li>\n</ol>\n",
      "date_published": "2021-02-10T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/pytest_for_functional_tests/",
      "url": "https://lilatomic.ca/posts/pytest_for_functional_tests/",
      "title": "Using Pytest for Testing Deployments",
      "content_html": "<!-- prettier-ignore-start -->\n<!-- prettier-ignore-end -->\n<h1 id=\"using-pytest-for-testing-deployments\" tabindex=\"-1\">Using Pytest for Testing Deployments <a class=\"direct-link\" href=\"#using-pytest-for-testing-deployments\">#</a></h1>\n<p><a href=\"#full-solution\">Jump to example solution</a></p>\n<h2 id=\"why\" tabindex=\"-1\">Why <a class=\"direct-link\" href=\"#why\">#</a></h2>\n<p>Functional tests are tests against the whole application, as deployed. And if you're doing stuff in the Cloud :tm:, the Infrastructure is the Application, in many cases. So you <em>should</em> be doing functional tests, to ensure that you are using the <abbr title=\"Software as a Service\">SaaS</abbr> offerings correctly, and you may need to be in order to test the application at all. Also, if you're doing <abbr title=\"Continuous delivery\">CD</abbr> or if people are deploying/installing your application, you might want to test that process.</p>\n<p>One of the problems with testing deployments is that the process can be fairly lengthy (maybe it needs to spin up a <abbr title=\"Database\">DB</abbr> or <abbr title=\"Kubernetes\">K8s</abbr> cluster). Tests will require the same Deployment step, though might have different setups. For example, you might have an application which can receive events from a messagequeue, a storage account, or from HTTP requests through an API Gateway. You would want to test that it consumes from all 3 sources, and would need to set up those test resources individually; but it's the same application under test.</p>\n<p>This type of setup can be generalised to any sort of batch process. For example, you might be testing infrastructure compliance tooling, where you trigger the &quot;evaluate&quot; function and <em>all</em> resources will be scanned and remediated. Triggering the &quot;evaluate&quot; multiple times is time-prohibitive and unnecessary, since each compliance rule will be evaluated individually. Another example would be a service which needs to be submitted to a job processor. It might be impractical to submit individual jobs for every test, because of per-job overhead.</p>\n<h2 id=\"what\" tabindex=\"-1\">What <a class=\"direct-link\" href=\"#what\">#</a></h2>\n<p>In this situation, we'd like to have: 1. several tests : It is critical that these tests are independent and look like normal tests. Solutions which will involve collecting a pile of assertions (or worse, asserting them sequentially so you only get the first failure) 2. with individual setup steps (as stated above, they may have different requirements) 3. sharing a common setup step (this is the big, time-consuming step) 4. which occurs after the individual setups (if the setups occur after big deploy step, it is actually pretty easy to do with pytest, since their failure wouldn't count as a failed prerequisite) 5. which will not be impacted by the failure of any individual test setup (obviously, the failure of the messagequeue input should not impact testing the storage account)</p>\n<h2 id=\"how\" tabindex=\"-1\">How <a class=\"direct-link\" href=\"#how\">#</a></h2>\n<p>This is my &quot;reasonable&quot; solution to the problem. I walk through each step to explain it. Skip ahead to the <a href=\"#full-solution\">full solution</a></p>\n<ol>\n<li>Several tests : Nothing complicated. The <code>order</code> fixture lets us see the execution order of fixtures. It has a <code>session</code> scope so it lasts across all of our tests. It also stands in for other common dependencies, like credentials or whatever.</li>\n</ol>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> pytest</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"session\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">yield</span> x</span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_0</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_0\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_1</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_1\"</span><span class=\"token punctuation\">)</span></span></code></pre>\n<ol start=\"2\">\n<li>With individual fixtures : these are our setup filters. They're straightforward for now, but we'll need to make some modifications to them later. The first thing we'll do is to mark them with a <code>class</code> scope, which will be used to make them run only once. It might not be necessary because of pytest's fun fixture scoping rules, but I just mark them this way since it doesn't really make a difference to me.</li>\n</ol>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> pytest</span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">setup_0</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"setup_0\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">setup_1</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"setup_1\"</span><span class=\"token punctuation\">)</span></span></code></pre>\n<ol start=\"3\">\n<li>Sharing a common setup step : This is our Big Thing. I've taken inspiration from the pytest page for <a href=\"https://docs.pytest.org/en/latest/fixture.html#running-multiple-assert-statements-safely\">running multiple asserts safely</a>. We make a Test Class to hold all the tests which depend on the big setup. This allows us to create the Big Thing as a class-scoped fixture. The important thing about this fixture is that it is <code>autouse</code>, so it will automatically occur before all the tests. This does force us to put all the tests in this class, but that doesn't seem to be a really hard thing to do.</li>\n</ol>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> pytest</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBatch</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> autouse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"deploy\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">test_0</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">,</span> setup_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_0\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">test_1</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">,</span> setup_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_1\"</span><span class=\"token punctuation\">)</span></span></code></pre>\n<ol start=\"4\">\n<li>Which occurs after the individual setups : Unfortunately, this doesn't <em>quite</em> work, since the <code>setup</code> operations don't have to occur before the <code>deploy</code>. So we need to add them as dependencies to the <code>deploy</code> operation. The duplication of these setups is a bit not great. If I figure something better out I'll let you know. I think it's still reasonably fine to say that there's an extra step to register something as needing to happened before the deploy</li>\n</ol>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> pytest</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBatch</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> autouse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">,</span> setup_0<span class=\"token punctuation\">,</span> setup_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"deploy\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">test_0</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">,</span> setup_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_0\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">test_1</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">,</span> setup_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_1\"</span><span class=\"token punctuation\">)</span></span></code></pre>\n<ol start=\"5\">\n<li>Which will not be impacted by the failure of any individual test setup : You may have notices that since the <code>setup</code> are fixture dependencies of <code>deploy</code>, their failure will cause the whole <code>deploy</code> to not start and all the tests to fail. So we'll have a fun way of catching those exceptions, and we'll explode them in the relevant test, so that only that test fails. It's not the greatest that you have to do this for all the setups.</li>\n</ol>\n<p>:/conftest.py</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> pytest</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> decorator <span class=\"token keyword\">import</span> deorate</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">shroud</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_shroud</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> e</span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> decorate<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _belt<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">unshroud</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">raise</span> a</span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> a</span></code></pre>\n<p>:/test.py</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> pytest</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> conftest <span class=\"token keyword\">import</span> shroud<span class=\"token punctuation\">,</span> unshroud</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> pytest</span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@shroud</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">setup_0</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"setup_0\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@shroud</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">setup_1</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"setup_1\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBatch</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> autouse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">,</span> setup_0<span class=\"token punctuation\">,</span> setup_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"deploy\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">test_0</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">,</span> setup_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tunshroud<span class=\"token punctuation\">(</span>setup_0<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_0\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">test_1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">,</span> setup_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tunshroud<span class=\"token punctuation\">(</span>setup_1<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_1\"</span><span class=\"token punctuation\">)</span></span></code></pre>\n<h2 id=\"full-solution\" tabindex=\"-1\">Full Solution <a class=\"direct-link\" href=\"#full-solution\">#</a></h2>\n<p>:/conftest.py</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> pytest</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> decorator <span class=\"token keyword\">import</span> deorate</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">shroud</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">_shroud</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t\t<span class=\"token keyword\">return</span> e</span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> decorate<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> _belt<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">unshroud</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">raise</span> a</span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">return</span> a</span></code></pre>\n<p>:/test.py</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"highlight-line\"><span class=\"token keyword\">import</span> pytest</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">from</span> conftest <span class=\"token keyword\">import</span> shroud<span class=\"token punctuation\">,</span> unshroud</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">import</span> pytest</span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@shroud</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">setup_0</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"setup_0\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@shroud</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">setup_1</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"setup_1\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"><span class=\"token decorator annotation punctuation\">@shroud</span></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">setup_failing</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token triple-quoted-string string\">\"\"\" This setup fails, but only test_failing will fail \"\"\"</span></span>\n<span class=\"highlight-line\">\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"setup_failing\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\traisse Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"setup failure\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBatch</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> autouse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">,</span> setup_0<span class=\"token punctuation\">,</span> setup_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"deploy\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">test_0</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">,</span> setup_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tunshroud<span class=\"token punctuation\">(</span>setup_0<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_0\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">test_1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">,</span> setup_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\tunshroud<span class=\"token punctuation\">(</span>setup_1<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_1\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\">\t<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>xfail</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">def</span> <span class=\"token function\">test_failing</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> setup_failing<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"test_failing_begin\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\tunshroud<span class=\"token punctuation\">(</span>setup_failing<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t\torder<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"unshrouding will cause this not to appear\"</span><span class=\"token punctuation\">)</span></span></code></pre>\n",
      "date_published": "2020-12-30T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/fun_with_adodotnet/",
      "url": "https://lilatomic.ca/posts/fun_with_adodotnet/",
      "title": "Fun with ADO.NET",
      "content_html": "<h1 id=\"fun-with-ado.net\" tabindex=\"-1\">Fun with <a href=\"http://ADO.NET\">ADO.NET</a> <a class=\"direct-link\" href=\"#fun-with-ado.net\">#</a></h1>\n<h2 id=\"column-is-not-in-table%2C-but-it-definitely-is\" tabindex=\"-1\">Column is not in Table, but it definitely is <a class=\"direct-link\" href=\"#column-is-not-in-table%2C-but-it-definitely-is\">#</a></h2>\n<h3 id=\"problem\" tabindex=\"-1\">Problem <a class=\"direct-link\" href=\"#problem\">#</a></h3>\n<p>Maybe you've got some code which is like the following, which accesses a field by a column reference. This particular snippet converts DBNull to Nothing (null), which is kinda useful I guess.</p>\n<pre class=\"language-vb\"><code class=\"language-vb\"><span class=\"highlight-line\"><span class=\"token keyword\">Public</span> <span class=\"token keyword\">Shared</span> <span class=\"token keyword\">Function</span> GetField<span class=\"token punctuation\">(</span><span class=\"token keyword\">ByVal</span> row <span class=\"token keyword\">As</span> EntityBase<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ByVal</span> field <span class=\"token keyword\">As</span> DataColumn<span class=\"token punctuation\">)</span> <span class=\"token keyword\">As</span> <span class=\"token keyword\">Object</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">Dim</span> obj <span class=\"token keyword\">As</span> <span class=\"token keyword\">Object</span> <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>DataRow<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">If</span> <span class=\"token keyword\">TypeOf</span> obj <span class=\"token keyword\">Is</span> DBNull <span class=\"token keyword\">Then</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token keyword\">Return</span> <span class=\"token boolean\">Nothing</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">End</span> <span class=\"token keyword\">If</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">Return</span> obj</span>\n<span class=\"highlight-line\"><span class=\"token keyword\">End</span> <span class=\"token keyword\">Function</span></span></code></pre>\n<p>You might find that you're getting some error about <code>&quot;Column '' does not belong to table .&quot;</code>, but you are 100% sure that the column actually is there. Maybe you've even cracked it open in the debugger and checked that the Table definitely has that column.</p>\n<h3 id=\"possible-cause\" tabindex=\"-1\">Possible Cause <a class=\"direct-link\" href=\"#possible-cause\">#</a></h3>\n<p>One possibility is that the Columns are actually checked by reference equality, not value equality. So if you somehow have a new or different instance of the Table, the Column from one will not be found in the other. This could happen if you've recreated the DB but haven't updated things which reference columns. For example, maybe the application has a handy &quot;reload data&quot; button which recreates the tables and reloads from the DB, but doesn't purge an in-memory list (maybe it's even tightly bound in a UI component). Another way you could end up with different DBs is in tests. You might create and seed a Table, and separately reference columns from a Table inside your test.</p>\n<p>For extra fun, this doesn't seem to be a problem in the .Net Framework 2, but <em>is</em> in the .Net Framework 4. So that's exciting.</p>\n",
      "date_published": "2020-12-09T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/dhall_common_tasks_for_config_files/",
      "url": "https://lilatomic.ca/posts/dhall_common_tasks_for_config_files/",
      "title": "Common Dhall Tasks for Config Files",
      "content_html": "<h1 id=\"common-dhall-tasks-for-config-files\" tabindex=\"-1\">Common Dhall Tasks for Config Files <a class=\"direct-link\" href=\"#common-dhall-tasks-for-config-files\">#</a></h1>\n<p>This page describes common tasks in using Dhall for generating config files. It provides the step-by-step for implementing these common features.</p>\n<h2 id=\"enums-(sum-types)\" tabindex=\"-1\">Enums (Sum Types) <a class=\"direct-link\" href=\"#enums-(sum-types)\">#</a></h2>\n<ol>\n<li>\n<p>Define the type. Angle brackets around all the options, pipelines between the options. These are the names which appear in code, so it's alright if they follow your code convention rather than how they appear in the config file. So if you write enums in all capital letters because they're basically constants, you do you.</p>\n<p>:/types/ServiceType.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token operator\">&lt;</span> simple <span class=\"token operator\">|</span> forking <span class=\"token operator\">|</span> oneshot <span class=\"token operator\">|</span> notify <span class=\"token operator\">|</span> dbus <span class=\"token operator\">|</span> idle <span class=\"token operator\">></span></span></code></pre>\n</li>\n<li>\n<p>Register it in the types.dhall file:</p>\n<p>:/types.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">.</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServiceType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">/</span><span class=\"token class-name\">ServiceType</span><span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n</li>\n<li>\n<p>Use it in an example by referencing through the type import:</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">ServiceType</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Systemd</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ServiceType</span><span class=\"token punctuation\">.</span>simple</span></code></pre>\n</li>\n<li>\n<p>Make a renderer for the type. Start with the import of the types files. Then we make a function which merges a record with the string equivalents with the input. The only thing which falls out is the correct string equivalent. Neat!</p>\n<p>:/render/ServiceType.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> types <span class=\"token operator\">=</span> <span class=\"token punctuation\">..</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">in</span>  <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token class-name\">ServiceType</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">merge</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">{</span> simple <span class=\"token operator\">=</span> <span class=\"token string\">\"simple\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">,</span> forking <span class=\"token operator\">=</span> <span class=\"token string\">\"forking\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">,</span> oneshot <span class=\"token operator\">=</span> <span class=\"token string\">\"oneshot\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">,</span> notify <span class=\"token operator\">=</span> <span class=\"token string\">\"notify\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">,</span> dbus <span class=\"token operator\">=</span> <span class=\"token string\">\"dbus\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">,</span> idle <span class=\"token operator\">=</span> <span class=\"token string\">\"idle\"</span></span>\n<span class=\"highlight-line\">\t\t<span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">\t\tx</span></code></pre>\n</li>\n<li>\n<p>Register the renderer with:</p>\n<p>:/render.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">.</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServiceType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">ServiceType</span><span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n</li>\n<li>\n<p>Use it in other renderers like normal. Since we're in the 'render' folder, we can just import it with a local import, like <code>./ServiceType.dhall</code></p>\n<p>:/render/Service.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> types <span class=\"token operator\">=</span> <span class=\"token punctuation\">..</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">in</span>  <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n\t<span class=\"token string\">''\n<span class=\"highlight-line\">\t[Service]</span>\n<span class=\"highlight-line\">\tUser=<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\">i<span class=\"token punctuation\">.</span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">}</span></span></span>\n<span class=\"highlight-line\">\tExecStart=<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\">i<span class=\"token punctuation\">.</span><span class=\"token class-name\">ExecStart</span></span><span class=\"token punctuation\">}</span></span></span>\n<span class=\"highlight-line\">\tType=<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">ServiceType</span><span class=\"token punctuation\">.</span>dhall i<span class=\"token punctuation\">.</span><span class=\"token class-name\">ServiceType</span></span><span class=\"token punctuation\">}</span></span></span>\n\t''</span></code></pre>\n</li>\n</ol>\n<h2 id=\"unions-%7C-complex-sum-types\" tabindex=\"-1\">Unions | Complex Sum Types <a class=\"direct-link\" href=\"#unions-%7C-complex-sum-types\">#</a></h2>\n<p>Sometimes you've got a field which is a value of Type a <em>or</em> Type b. A sum type represents that. This example combines an enum and Text, but the same principle holds for any types. Here's a <a href=\"https://hackage.haskell.org/package/dhall-1.16.1/docs/Dhall-Tutorial.html#g:12\">link</a> for the official tutorial</p>\n<ol>\n<li>\n<p>Create the sum type similarly to how you'd create an Enum. Note that each option has both a name and a Type. These also generate the constructors for the Union type.</p>\n<p>:/types/Dependency.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Runlevel</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">RunlevelTargets</span><span class=\"token punctuation\">.</span>dhall <span class=\"token operator\">|</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span> <span class=\"token operator\">></span></span></code></pre>\n</li>\n<li>\n<p>Register it in the ':/types.dhall'</p>\n</li>\n<li>\n<p>Make a renderer for the type. You can use merge to select a function and then apply it. You can compose this from other functions you have already. Note that we use <code>=</code> here, since this isn't defining a type signature. Also note that we're using <code>id</code>, <code>Text/show</code> was adding extra quotes.</p>\n<p>:/render/Dependency.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> types <span class=\"token operator\">=</span> <span class=\"token punctuation\">..</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">:</span> <span class=\"token class-name\">Type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span> <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span> x</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">in</span>  <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token class-name\">Dependency</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">merge</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Runlevel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">RunlevelTargets</span><span class=\"token punctuation\">.</span>dhall<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> id <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">}</span> x</span></code></pre>\n</li>\n<li>\n<p>Register it in the ':/render.dhall'</p>\n</li>\n<li>\n<p>Use it by accessing the constructor you want. Note that the renderer is the same, since they're ultimately the same type:</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">Systemd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">..</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">Render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>reder<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"token keyword\">in</span>  <span class=\"token string\">''\n<span class=\"highlight-line\">\t<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\"><span class=\"token class-name\">Render</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Dependency</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Systemd</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Dependency</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Service</span> <span class=\"token string\">\"nfs-common.service\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span></span>\n\t<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\"><span class=\"token class-name\">Render</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Dependency</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token class-name\">Systemd</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Dependency</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Runlevel</span> <span class=\"token class-name\">Systemd</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Runlevel</span><span class=\"token punctuation\">.</span>multiuser<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span>\n\t''</span></code></pre>\n</li>\n</ol>\n<h2 id=\"optional-fields-(autoexclusion)\" tabindex=\"-1\">Optional fields (autoexclusion) <a class=\"direct-link\" href=\"#optional-fields-(autoexclusion)\">#</a></h2>\n<p>Sometimes you want a field to not appear if there is no value defined.</p>\n<p>We'll define a helper function to render optionals. I use it frequently so I gave it a short name. Mine adds a newline automatically, so they don't appear if the option doesn't render.</p>\n<p>:/render/ro.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"token comment\">{-\n<span class=\"highlight-line\">\ta: Type parameter</span>\n<span class=\"highlight-line\">\tf: Renderer</span>\n<span class=\"highlight-line\">\topt: Value</span>\n-}</span>\n<span class=\"highlight-line\"><span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">:</span> <span class=\"token class-name\">Type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n<span class=\"highlight-line\"><span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">:</span> a <span class=\"token operator\">→</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n<span class=\"highlight-line\"><span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>opt <span class=\"token operator\">:</span> <span class=\"token class-name\">Optional</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n<span class=\"highlight-line\">\t<span class=\"token keyword\">merge</span> <span class=\"token punctuation\">{</span> <span class=\"token builtin\">Some</span> <span class=\"token operator\">=</span> <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span> f x <span class=\"token operator\">++</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">None</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span> opt</span></code></pre>\n<p>Using that one is a bit clunky:</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">in</span>  <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token class-name\">Install</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n          <span class=\"token string\">''\n<span class=\"highlight-line\">          [Install]</span>\n          ''</span>\n<span class=\"highlight-line\">      <span class=\"token operator\">++</span>  ro</span>\n<span class=\"highlight-line\">            types<span class=\"token punctuation\">.</span><span class=\"token class-name\">Dependency</span></span>\n<span class=\"highlight-line\">            <span class=\"token punctuation\">(</span><span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token class-name\">Dependency</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span> <span class=\"token string\">\"WantedBy=<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">Dependency</span><span class=\"token punctuation\">.</span>dhall l</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"highlight-line\">            i<span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n<p>So I made this following helper, which works better with the config file format:</p>\n<p>:/render/ron.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> ro <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>ro<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">in</span>  <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">:</span> <span class=\"token class-name\">Type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n<span class=\"highlight-line\">    <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n<span class=\"highlight-line\">    <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">:</span> a <span class=\"token operator\">→</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n<span class=\"highlight-line\">    <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>opt <span class=\"token operator\">:</span> <span class=\"token class-name\">Optional</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n<span class=\"highlight-line\">      ro a <span class=\"token punctuation\">(</span><span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\">n</span><span class=\"token punctuation\">}</span></span>=<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\">f l</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span> opt</span></code></pre>\n<p>And can be used like:</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">in</span>  <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token class-name\">Install</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n          <span class=\"token string\">''\n<span class=\"highlight-line\">          [Install]</span>\n          ''</span>\n<span class=\"highlight-line\">      <span class=\"token operator\">++</span>  ron types<span class=\"token punctuation\">.</span><span class=\"token class-name\">Dependency</span> <span class=\"token string\">\"WantedBy\"</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">Dependency</span><span class=\"token punctuation\">.</span>dhall i<span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span></span></code></pre>\n<p>If you find yourself frequently using the same type (for example, bools), you can make another wrapper for that. The dhall-nethack repo makes significant use of those, see the <a href=\"https://github.com/dhall-lang/dhall-nethack/blob/2b7ea599ae09c077bd8bda82cfb3c2601925e300/render/Config.dhall\">config class</a></p>\n<h2 id=\"multiple-exports-per-file\" tabindex=\"-1\">Multiple exports per file <a class=\"direct-link\" href=\"#multiple-exports-per-file\">#</a></h2>\n<p>Dhall likes you to have a single type per file. But sometimes you have a group of types which don't make sense separately. Or you have a lot of types which are basically just type aliases for primitive types. You can export them in a file like so</p>\n<p>:/ex.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token punctuation\">{</span> <span class=\"token class-name\">Thing0</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thing1</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span> <span class=\"token punctuation\">}</span></span></code></pre>\n<p>and then use them like</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> ex <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>ex<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">let</span> y</span>\n<span class=\"highlight-line\">    <span class=\"token operator\">:</span> ex<span class=\"token punctuation\">.</span><span class=\"token class-name\">Thing0</span></span>\n<span class=\"highlight-line\">    <span class=\"token operator\">=</span> <span class=\"token string\">\"HELLO\"</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">in</span> y</span></code></pre>\n<p>If some of your types reference another, you'll need to pull the referenced type into a <code>let</code> higher in the file:</p>\n<p>:/ex.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">T</span></span>\n<span class=\"highlight-line\">    <span class=\"token operator\">:</span> <span class=\"token class-name\">Type</span></span>\n<span class=\"highlight-line\">    <span class=\"token operator\">=</span> <span class=\"token class-name\">Text</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">in</span>  <span class=\"token punctuation\">{</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListOfT</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">}</span></span></code></pre>\n",
      "date_published": "2020-12-09T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/dhall_for_config_files/",
      "url": "https://lilatomic.ca/posts/dhall_for_config_files/",
      "title": "Dhall for Config Files",
      "content_html": "<h1 id=\"dhall-for-config-files\" tabindex=\"-1\">Dhall for Config Files <a class=\"direct-link\" href=\"#dhall-for-config-files\">#</a></h1>\n<h2 id=\"setting-up-a-dhall-project\" tabindex=\"-1\">Setting up a Dhall project <a class=\"direct-link\" href=\"#setting-up-a-dhall-project\">#</a></h2>\n<p>Let's start with the standard directory used in the <a href=\"https://github.com/dhall-lang/dhall-nethack/blob/master/types.dhall\">dhall-nethack repo</a></p>\n<ul>\n<li>types.dhall : this file is a convenient import of all the types</li>\n<li>types/ : this is where we put all of our type definitions</li>\n<li>render.dhall : this is a convenient way of importing all the render functions</li>\n<li>render/ : this is where we put all of our render functions</li>\n</ul>\n<p>Neat!</p>\n<h2 id=\"adding-a-type\" tabindex=\"-1\">Adding a type <a class=\"direct-link\" href=\"#adding-a-type\">#</a></h2>\n<ol>\n<li>\n<p>Add your type as a record in a file under the :/types/ directory.</p>\n<p>:/types/Install.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token punctuation\">{</span> <span class=\"token class-name\">WantedBy</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">}</span></span></code></pre>\n<p>If you need to reference another type in this type, you can use an import, like <code>./TypeName.dhall</code>. Since we're in the folder with all of our types, we can just use access to the local directory.<br>\n:/types/SystemdUnit.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span>dhall<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span>dhall<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span>dhall <span class=\"token punctuation\">}</span></span></code></pre>\n</li>\n<li>\n<p>Register your type in :/types.</p>\n<p>:/types.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">/</span><span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">/</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">/</span><span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\">  <span class=\"token punctuation\">,</span> <span class=\"token class-name\">SystemdUnit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">/</span><span class=\"token class-name\">SystemdUnit</span><span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n</li>\n<li>\n<p>You can now use your type by importing the :/types.dhall file:</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">Systemd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">let</span> t</span>\n<span class=\"highlight-line\">    <span class=\"token operator\">:</span> <span class=\"token class-name\">Systemd</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SystemdUnit</span></span>\n<span class=\"highlight-line\">    <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Description</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"me\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecStart</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/usr/bin/bash pwd\"</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"multi_user.target\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">in</span>  <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Description</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"me\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecStart</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/usr/bin/bash pwd\"</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"multi_user.target\"</span></span>\n<span class=\"highlight-line\">    <span class=\"token punctuation\">}</span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"adding-a-renderer-for-a-type\" tabindex=\"-1\">Adding a renderer for a type <a class=\"direct-link\" href=\"#adding-a-renderer-for-a-type\">#</a></h2>\n<p>If you need to output to a format other than JSON or YAML, you'll need to write your renderers and pass it through <code>dhall text</code></p>\n<ol>\n<li>\n<p>Add a renderer for your type in a file under the :/render/ directory. This is a function which takes one of your type and returns Text. You can import your type with all types through the phrase <code>let types = ../types.dhall</code>, or you can use a direct import with <code>../types/YourType.dhall</code>.</p>\n<p>:/render/Install.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> types <span class=\"token operator\">=</span> <span class=\"token punctuation\">..</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">in</span>  <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token class-name\">Install</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n      <span class=\"token string\">''\n<span class=\"highlight-line\">      [Install]</span>\n<span class=\"highlight-line\">      WantedBy=<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\">i<span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span></span><span class=\"token punctuation\">}</span></span></span>\n      ''</span></code></pre>\n<p>If you need to reference another renderer in this renderer, you can do that with a simple import, like <code>./Service.dhall</code></p>\n</li>\n<li>\n<p>Register the renderer in the :/render.dhall file</p>\n<p>:/reder.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SystemdUnit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">SystemdUnit</span><span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span></code></pre>\n</li>\n<li>\n<p>You can now use your renderers by importing them with <code>./render.dhall</code></p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">Systemd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">Render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>reder<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">let</span> t</span>\n<span class=\"highlight-line\">    <span class=\"token operator\">:</span> <span class=\"token class-name\">Systemd</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SystemdUnit</span></span>\n<span class=\"highlight-line\">    <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Description</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"me\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecStart</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/usr/bin/bash pwd\"</span> <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"multi_user.target\"</span></span>\n<span class=\"highlight-line\">      <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">in</span>  <span class=\"token class-name\">Render</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SystemdUnit</span> t</span></code></pre>\n</li>\n<li>\n<p>And you can run the dhall with <code>dhall text</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"highlight-line\"><span class=\"token operator\">></span> dhall text <span class=\"token parameter variable\">--file</span> f.dhall</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"><span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>hello</span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"><span class=\"token assign-left variable\">User</span><span class=\"token operator\">=</span>me</span>\n<span class=\"highlight-line\"><span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/bin/bash <span class=\"token builtin class-name\">pwd</span></span>\n<span class=\"highlight-line\"><span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span></span>\n<span class=\"highlight-line\"><span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi_user.target</span></code></pre>\n</li>\n</ol>\n<p>If you have a standard format you're building to, you can create a helper for easier importing. The example builds systemd unit files, so we might create one like</p>\n<p>:/toSystemdUnit</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">SystemdUnit</span><span class=\"token punctuation\">.</span>dhall</span></code></pre>\n<h2 id=\"adding-examples\" tabindex=\"-1\">Adding examples <a class=\"direct-link\" href=\"#adding-examples\">#</a></h2>\n<p>Everyone loves seeing examples of how to use your stuff, so let's add those. They're just a file located in the expected directory :/examples</p>\n<p>:/examples/templated_unit.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"highlight-line\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">Systemd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">..</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall</span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">let</span> jupyterhub_unit</span>\n<span class=\"highlight-line\">    <span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span> <span class=\"token operator\">→</span> <span class=\"token class-name\">Systemd</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SystemdUnit</span></span>\n<span class=\"highlight-line\">    <span class=\"token operator\">=</span> <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>config_location <span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span></span>\n<span class=\"highlight-line\">        <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Description</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"JupyterHub\"</span></span>\n<span class=\"highlight-line\">        <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span></span>\n<span class=\"highlight-line\">          <span class=\"token punctuation\">{</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"jupyterhub\"</span></span>\n<span class=\"highlight-line\">          <span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecStart</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/opt/jupyterhub/bin/jupyterhub -f <span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\">config_location</span><span class=\"token punctuation\">}</span></span>\"</span></span>\n<span class=\"highlight-line\">          <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\">        <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"multi_user.target\"</span></span>\n<span class=\"highlight-line\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"highlight-line\"></span>\n<span class=\"highlight-line\"><span class=\"token keyword\">in</span>  jupyterhub_unit</span></code></pre>\n<p>And then we can invoke this from the command line, with something like:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"highlight-line\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"./render/SystemdUnit.dhall (./examples/templated_unit.dhall <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>/opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>)\"</span> <span class=\"token operator\">|</span> dhall text</span></code></pre>\n<p>or with our helper renderer:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"highlight-line\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"./toSystemdUnit.dhall (./examples/templated_unit.dhall <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>/opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>)\"</span> <span class=\"token operator\">|</span> dhall text</span></code></pre>\n",
      "date_published": "2020-11-04T00:00:00Z"
    },{
      "id": "https://lilatomic.ca/posts/firstpost/",
      "url": "https://lilatomic.ca/posts/firstpost/",
      "title": "This is my first post.",
      "content_html": "<h2 id=\"what's-happening-here\" tabindex=\"-1\">What's happening here <a class=\"direct-link\" href=\"#what's-happening-here\">#</a></h2>\n<p>Couple things I'll be doing:</p>\n<ul>\n<li>Filling in practical documentation : sometimes you want to know how to use a technology to <em>solve a problem</em>, not just in the abstract. As I solve problems, I'll be putting the solution here</li>\n<li>Getting into the air howtos : there are a lot of tutorials which are the most basic of &quot;How to use technology X&quot;. But often there's a significant gap to actually using that effectively. So these Howto articles will go through using a tool more indepth.</li>\n<li>Reading reports : Mostly so I don't forget the things I've read, and maybe they'll be useful for you too.</li>\n<li>Ideas (mostly about software) : I have ideas, and while they're not all good, some of them might be interesting.</li>\n</ul>\n",
      "date_published": "2020-09-30T00:00:00Z"
    }
  ]
}
