{
  "version": "https://jsonfeed.org/version/1",
  "title": "Lilatomic",
  "home_page_url": "https://lilatomic.ca/",
  "feed_url": "https://lilatomic.ca/feed/feed.json",
  "description": "A place for my things",
  "author": {
    "name": "Lilatomic",
    "url": "https://lilatomic.ca/about-me/"
  },
  "items": [{
      "id": "https://lilatomic.ca/posts/dhall_for_config_files/",
      "url": "https://lilatomic.ca/posts/dhall_for_config_files/",
      "title": "Dhall for Config Files",
      "content_html": "<h1 id=\"dhall-for-config-files\">Dhall for Config Files <a class=\"direct-link\" href=\"#dhall-for-config-files\">#</a></h1>\n<h2 id=\"setting-up-a-dhall-project\">Setting up a Dhall project <a class=\"direct-link\" href=\"#setting-up-a-dhall-project\">#</a></h2>\n<p>Let's start with the standard directory used in the <a href=\"https://github.com/dhall-lang/dhall-nethack/blob/master/types.dhall\">dhall-nethack repo</a></p>\n<ul>\n<li>types.dhall : this file is a convenient import of all the types</li>\n<li>types/ : this is where we put all of our type definitions</li>\n<li>render.dhall : this is a convenient way of importing all the render functions</li>\n<li>render/ : this is where we put all of our render functions</li>\n</ul>\n<p>Neat!</p>\n<h2 id=\"adding-a-type\">Adding a type <a class=\"direct-link\" href=\"#adding-a-type\">#</a></h2>\n<ol>\n<li>\n<p>Add your type as a record in a file under the :/types/ directory.</p>\n<p>:/types/Install.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"token punctuation\">{</span> <span class=\"token class-name\">WantedBy</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>If you need to reference another type in this type, you can use an import, like <code>./TypeName.dhall</code>. Since we're in the folder with all of our types, we can just use access to the local directory.<br>\n:/types/SystemdUnit.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span>dhall<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span>dhall<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span><span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span>dhall <span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li>\n<p>Register your type in :/types.</p>\n<p>:/types.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">/</span><span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span>dhall<br>  <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">/</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span>dhall<br>  <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">/</span><span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span>dhall<br>  <span class=\"token punctuation\">,</span> <span class=\"token class-name\">SystemdUnit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">/</span><span class=\"token class-name\">SystemdUnit</span><span class=\"token punctuation\">.</span>dhall<br><span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li>\n<p>You can now use your type by importing the :/types.dhall file:</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">Systemd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall<br><br><span class=\"token keyword\">let</span> t<br>    <span class=\"token operator\">:</span> <span class=\"token class-name\">Systemd</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SystemdUnit</span><br>    <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Description</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><br>      <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"me\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecStart</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/usr/bin/bash pwd\"</span> <span class=\"token punctuation\">}</span><br>      <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"multi_user.target\"</span><br>      <span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">in</span>  <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Description</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><br>    <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"me\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecStart</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/usr/bin/bash pwd\"</span> <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"multi_user.target\"</span><br>    <span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ol>\n<h2 id=\"adding-a-renderer-for-a-type\">Adding a renderer for a type <a class=\"direct-link\" href=\"#adding-a-renderer-for-a-type\">#</a></h2>\n<p>If you need to output to a format other than JSON or YAML, you'll need to write your renderers and pass it through <code>dhall text</code></p>\n<ol>\n<li>\n<p>Add a renderer for your type in a file under the :/render/ directory. This is a function which takes one of your type and returns Text. You can import your type with all types through the phrase <code>let types = ../types.dhall</code>, or you can use a direct import with <code>../types/YourType.dhall</code>.</p>\n<p>:/render/Install.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"token keyword\">let</span> types <span class=\"token operator\">=</span> <span class=\"token punctuation\">..</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall<br><br><span class=\"token keyword\">in</span>  <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token class-name\">Install</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span><br>      <span class=\"token string\">''<br>      [Install]<br>      WantedBy=<span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\">i<span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span></span><span class=\"token punctuation\">}</span></span><br>      ''</span></code></pre>\n<p>If you need to reference another renderer in this renderer, you can do that with a simple import, like <code>./Service.dhall</code></p>\n</li>\n<li>\n<p>Register the renderer in the :/render.dhall file</p>\n<p>:/reder.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span>dhall<br><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">.</span>dhall<br><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span>dhall<br><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SystemdUnit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">SystemdUnit</span><span class=\"token punctuation\">.</span>dhall<br><span class=\"token punctuation\">}</span><br></code></pre>\n</li>\n<li>\n<p>You can now use your renderers by importing them with <code>./render.dhall</code></p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">Systemd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall<br><br><span class=\"token keyword\">let</span> <span class=\"token class-name\">Render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>reder<span class=\"token punctuation\">.</span>dhall<br><br><span class=\"token keyword\">let</span> t<br>    <span class=\"token operator\">:</span> <span class=\"token class-name\">Systemd</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SystemdUnit</span><br>    <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Description</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><br>      <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"me\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecStart</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/usr/bin/bash pwd\"</span> <span class=\"token punctuation\">}</span><br>      <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"multi_user.target\"</span><br>      <span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">in</span>  <span class=\"token class-name\">Render</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SystemdUnit</span> t</code></pre>\n</li>\n<li>\n<p>And you can run the dhall with <code>dhall text</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> dhall text --file f.dhall<br><span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span><br><span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>hello<br><span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span><br><span class=\"token assign-left variable\">User</span><span class=\"token operator\">=</span>me<br><span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/bin/bash <span class=\"token builtin class-name\">pwd</span><br><span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span><br><span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi_user.target</code></pre>\n</li>\n</ol>\n<p>If you have a standard format you're building to, you can create a helper for easier importing. The example builds systemd unit files, so we might create one like</p>\n<p>:/toSystemdUnit</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">/</span>render<span class=\"token punctuation\">/</span><span class=\"token class-name\">SystemdUnit</span><span class=\"token punctuation\">.</span>dhall</code></pre>\n<h2 id=\"adding-examples\">Adding examples <a class=\"direct-link\" href=\"#adding-examples\">#</a></h2>\n<p>Everyone loves seeing examples of how to use your stuff, so let's add those. They're just a file located in the expected directory :/examples</p>\n<p>:/examples/templated_unit.dhall</p>\n<pre class=\"language-dhall\"><code class=\"language-dhall\"><span class=\"token keyword\">let</span> <span class=\"token class-name\">Systemd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">..</span><span class=\"token punctuation\">/</span>types<span class=\"token punctuation\">.</span>dhall<br><br><span class=\"token keyword\">let</span> jupyterhub_unit<br>    <span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span> <span class=\"token operator\">→</span> <span class=\"token class-name\">Systemd</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SystemdUnit</span><br>    <span class=\"token operator\">=</span> <span class=\"token operator\">λ</span><span class=\"token punctuation\">(</span>config_location <span class=\"token operator\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">→</span><br>        <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Unit</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Description</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"JupyterHub\"</span><br>        <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Service</span> <span class=\"token operator\">=</span><br>          <span class=\"token punctuation\">{</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"jupyterhub\"</span><br>          <span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecStart</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/opt/jupyterhub/bin/jupyterhub -f <span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression language-dhall\">config_location</span><span class=\"token punctuation\">}</span></span>\"</span><br>          <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">,</span> <span class=\"token class-name\">Install</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WantedBy</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"multi_user.target\"</span><br>        <span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">in</span>  jupyterhub_unit</code></pre>\n<p>And then we can invoke this from the command line, with something like:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"./render/SystemdUnit.dhall (./examples/templated_unit.dhall <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>/opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>)\"</span> <span class=\"token operator\">|</span> dhall text</code></pre>\n<p>or with our helper renderer:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"./toSystemdUnit.dhall (./examples/templated_unit.dhall <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>/opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>)\"</span> <span class=\"token operator\">|</span> dhall text</code></pre>\n",
      "date_published": "2020-11-04T00:00:00+00:00"
    },{
      "id": "https://lilatomic.ca/posts/firstpost/",
      "url": "https://lilatomic.ca/posts/firstpost/",
      "title": "This is my first post.",
      "content_html": "<h2 id=\"what's-happening-here\">What's happening here <a class=\"direct-link\" href=\"#what's-happening-here\">#</a></h2>\n<p>Couple things I'll be doing:</p>\n<ul>\n<li>Filling in practical documentation : sometimes you want to know how to use a technology to <em>solve a problem</em>, not just in the abstract. As I solve problems, I'll be putting the solution here</li>\n<li>Getting into the air howtos : there are a lot of tutorials which are the most basic of &quot;How to use technology X&quot;. But often there's a significant gap to actually using that effectively. So these Howto articles will go through using a tool more indepth.</li>\n<li>Reading reports : Mostly so I don't forget the things I've read, and maybe they'll be useful for you too.</li>\n<li>Ideas (mostly about software) : I have ideas, and while they're not all good, some of them might be interesting.</li>\n</ul>\n",
      "date_published": "2020-09-30T00:00:00+00:00"
    }
  ]
}
